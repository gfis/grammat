/.ADA LOGON
/.ADA DO DO.EXTRA,('(PRIMARY)',PARM='ASSERT=400')
EOF IDENTIFIER INTEGER CHARACTER_STRING
[ADA_PROGRAM = COMPILATION_UNIT
 /*-------------------------------------------------------------------*/
 /*   A D A     DEPARTMENT OF DEFENSE HIGH ORDER LANGUAGE             */
 /*                                                                   */
 /* PRELIMINARY ADA REFERENCE MANUAL, ACM SIGPLAN NOTICES             */
 /* VOL. 14, NO. 6, JUNE 1979, PART A, APPENDIX E: SYNTAX SUMMARY     */
 /* SYNTAX FROM KNUTH RIPKEN JUNE 25,1979                             */
 /*-------------------------------------------------------------------*/
 
 /* 2.3 */
 /* IDENTIFIER IS RETURNED BY THE SCANNER */
 
 /* 2.4 */
.NUMBER = INTEGER_NUMBER | BASED_INTEGER_NUMBER
        | FIXED_POINT_NUMBER | FLOATING_POINT_NUMBER
 
 /* 2.5 */
.ENUMERATION_LITERAL = IDENTIFIER
                     | CHARACTER_STRING
 
 /* 3.1 */
.DECLARATIVE_ITEM =
    OBJECT_DECLARATION       | TYPE_DECLARATION
  | SUBTYPE_DECLARATION      | PRIVATE_TYPE_DECLARATION
 /*  | SUBPROGRAM_DECLARATION   | MODULE_DECLARATION */
  | ENTRY_DECLARATION        | EXCEPTION_DECLARATION
  | RENAMING_DECLARATION
 
 /* 3.2 */
.OBJECT_DECLARATION_LIST_OPTION =
                                | OBJECT_DECLARATION_LIST
.OBJECT_DECLARATION_LIST = OBJECT_DECLARATION
                         | OBJECT_DECLARATION_LIST OBJECT_DECLARATION
.OBJECT_DECLARATION =
    IDENTIFIER_LIST ':' CONSTANT_OPTION TYPE_ INITIALIZATION_OPTION
    IDENTIFIER      ':' CONSTANT_OPTION TYPE_ INITIALIZATION_OPTION
.CONSTANT_OPTION = | CONSTANT
.INITIALIZATION_OPTION = | ':=' EXPRESSION
.IDENTIFIER_LIST = IDENTIFIER
                 | IDENTIFIER_LIST ',' IDENTIFIER
 
 /* 3.3 */
.TYPE_ = TYPE_DEFINITION | TYPE_DENOTATION
.CONSTRAINT_OPTION = | CONSTRAINT
.TYPE_DEFINITION =
  | ENUMERATION_TYPE_DEFINITION  | INTEGER_TYPE_DEFINITION
  | REAL_TYPE_DEFINITION         | ARRAY_TYPE_DEFINITION
  | RECORD_TYPE_DEFINITION       | ACCESS_TYPE_DEFINITION
  | DERIVED_TYPE_DEFINITION
.TYPE_DENOTATION = /* TYPE_, SUBTYPE_ */ NAME
                 | NAME CONSTRAINT
.CONSTRAINT =
    RANGE_CONSTRAINT         | ACCURACY_CONSTRAINT
 /*  | INDEX_CONSTRAINT         | DISCRIMINANT_CONSTRAINT */
.TYPE_DECLARATION = TYPE IDENTIFIER IS TYPE_DEFINITION
                  | TYPE IDENTIFIER
.SUBTYPE_DECLARATION = SUBTYPE IDENTIFIER IS TYPE_DENOTATION
 
 /* 3.4 */
.DERIVED_TYPE_DEFINITION = NEW TYPE_DENOTATION CONSTRAINT_OPTION
 
 /* 3.5 */
.RANGE_CONSTRAINT_OPTION =
                         | RANGE RANGE_
.RANGE_CONSTRAINT = RANGE RANGE_
.RANGE_ = SIMPLE_EXPRESSION '..' SIMPLE_EXPRESSION
 
 /* 3.5.1 */
.ENUMERATION_TYPE_DEFINITION =
  '(' ENUMERATION_LITERAL_LIST ')'
.ENUMERATION_LITERAL_LIST = ENUMERATION_LITERAL
  | ENUMERATION_LITERAL_LIST ',' ENUMERATION_LITERAL
 
 /* 3.5.4 */
.INTEGER_TYPE_DEFINITION = RANGE_CONSTRAINT
 
 /* 3.5.5 */
.REAL_TYPE_DEFINITION = ACCURACY_CONSTRAINT
.ACCURACY_CONSTRAINT =
    DIGITS SIMPLE_EXPRESSION RANGE_CONSTRAINT_OPTION
  | DELTA  SIMPLE_EXPRESSION RANGE_CONSTRAINT_OPTION
 
 /* 3.6 */
.ARRAY_TYPE_DEFINITION =
  ARRAY '(' INDEX_TYPE_LIST ')' OF TYPE_DENOTATION
.INDEX_TYPE_LIST = INDEX_TYPE | INDEX_TYPE_LIST ',' INDEX_TYPE
.INDEX_TYPE = DISCRETE_RANGE | NAME
.DISCRETE_RANGE = RANGE_ | NAME RANGE_CONSTRAINT
.INDEX_CONSTRAINT = '(' DISCRETE_RANGE_LIST ')'
.DISCRETE_RANGE_LIST = DISCRETE_RANGE
                     | DISCRETE_RANGE_LIST ',' DISCRETE_RANGE
 
 /* 3.6.2 */
.AGGREGATE = '(' COMPONENT_ASSOCIATION_LIST ')'
.COMPONENT_ASSOCIATION_LIST = COMPONENT_ASSOCIATION
  | COMPONENT_ASSOCIATION_LIST ',' COMPONENT_ASSOCIATION
.COMPONENT_ASSOCIATION =  CHOICE_LIST '=>' EXPRESSION
.CHOICES_OPTION = | CHOICE_LIST '=>'
.CHOICE_LIST = CHOICE | CHOICE_LIST '|' CHOICE
.CHOICE = SIMPLE_EXPRESSION | DISCRETE_RANGE | OTHERS
 
 /* 3.7 */
.RECORD_TYPE_DEFINITION =
    RECORD
      LIST_OF_COMPONENT
    END RECORD
.LIST_OF_COMPONENT = OBJECT_DECLARATION_LIST_OPTION VARIANT_PART_OPTION
                | NULL ';'
.OBJECT_DECLARATION_LIST_OPTION =
  | OBJECT_DECLARATION_LIST_OPTION OBJECT_DECLARATION
.VARIANT_PART_OPTION = | VARIANT_PART
.VARIANT_PART =
    CASE NAME OF
      VARIANT_LIST_OPTION
    END CASE ';'
.VARIANT_LIST_OPTION =
                     | VARIANT_LIST
.VARIANT_LIST = VARIANT
              | VARIANT_LIST VARIANT
.VARIANT = | WHEN CHOICE_LIST '=>' LIST_OF_COMPONENT
 
 /* 3.7.3 */
.DISCRIMINANT_CONSTRAINT = AGGREGATE
 
 /* 3.8 */
.ACCESS_TYPE_DEFINITION = ACCESS TYPE_
 
 /* 4.1 */
.NAME_LIST_OPTION =
                  | '(' NAME_LIST ')'
.NAME_LIST = NAME
           | NAME_LIST ',' NAME
.NAME =
    IDENTIFIER               | INDEXED_COMPONENT
  | SELECTED_COMPONENT       | PREDEFINED_ATTRIBUTE
.INDEXED_COMPONENT = NAME '(' GENERALIZED_EXPRESSION_LIST ')'
.EXPRESSION_LIST = EXPRESSION | EXPRESSION_LIST ',' EXPRESSION
.SELECTED_COMPONENT = NAME '.' IDENTIFIER
.PREDEFINED_ATTRIBUTE = NAME '"'  IDENTIFIER
 
 /* 4.2 */
.LITERAL = NUMBER | CHARACTER_STRING | NULL
 
 /* 4.3 */
.VARIABLE = NAME | NAME '.' ALL
 /*          | NAME '(' DISCRETE_RANGE ')' */
.DISCRETE_RANGE_PACK_OPTION = | '(' DISCRETE_RANGE ')'
 
.EXPRESSION_OPTION = | EXPRESSION
.GENERALIZED_EXPRESSION_LIST = GENERALIZED_EXPRESSION
  | GENERALIZED_EXPRESSION_LIST ',' GENERALIZED_EXPRESSION
.GENERALIZED_EXPRESSION = EXPRESSION
  | SIMPLE_EXPRESSION '..' SIMPLE_EXPRESSION
  | PARAMETER_ASSOCIATION
  | COMPONENT_ASSOCIATION
  | GENERIC_ASSOCIATION
  | NAME RANGE_CONSTRAINT
.EXPRESSION = RELATION
            | AND_EXPRESSION RELATION
            | OR_EXPRESSION  RELATION
            | XOR_EXPRESSION RELATION
.AND_EXPRESSION = RELATION AND RELATION
        | AND_EXPRESSION AND RELATION
.OR_EXPRESSION = RELATION OR RELATION
        | OR_EXPRESSION OR RELATION
.XOR_EXPRESSION = RELATION XOR RELATION
        | XOR_EXPRESSION XOR RELATION
.RELATION =
    SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION  = SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION /= SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION <  SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION <= SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION >  SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION >= SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION     IN RANGE_
  | SIMPLE_EXPRESSION     IN TYPE_DENOTATION
  | SIMPLE_EXPRESSION NOT IN RANGE_
  | SIMPLE_EXPRESSION NOT IN TYPE_DENOTATION
.SIMPLE_EXPRESSION =     SUM
                   | '+' SUM
                   | '-' SUM
                   | NOT SUM
.TERM_SEQUENCE = | TERM_SEQUENCE ADDING_OPERATOR TERM
.SUM = TERM
     | SUM '+' TERM
     | SUM '&' TERM
     | SUM '-' TERM
.TERM = FACTOR
      | TERM '*' FACTOR
      | TERM '/' FACTOR
      | TERM MOD FACTOR
.FACTOR = PRIMARY
        | PRIMARY '$$' PRIMARY
.PRIMARY = LITERAL
         | VARIABLE
         | ALLOCATOR
         | '(' GENERALIZED_EXPRESSION_LIST ')'
 
 /* 4.5 */
.LOGICAL_OPERATOR          = AND | OR | XOR
.RELATIONAL_OPERATOR         = '=' | '/=' | '<' | '<=' | '>' | '>='
.ADDING_OPERATOR             = '+' | '-' | '&'
.UNARY_OPERATOR              = '+' | '-' | NOT
.MULTIPLYING_OPERATOR        = '*' | '/' | MOD
.EXPONENTIATING_OPERATOR = '$$'
 
 /* 4.6
.QUALIFIED_EXPRESSION =
    TYPE_DENOTATION '(' EXPRESSION ')' | TYPE_DENOTATION AGGREGATE
 
     4.7 */
.ALLOCATOR = NEW INDEXED_COMPONENT
 
 /* 5 */
.STATEMENT_LIST_OPTION =
  | STATEMENT_LIST
.STATEMENT_LIST = STATEMENT
  | STATEMENT_LIST STATEMENT
.STATEMENT = LABEL_LIST UNLABELLED_STATEMENT
           | UNLABELLED_STATEMENT
           | PRAGMA
.LABEL_LIST = LABEL
            | LABEL_LIST LABEL
.UNLABELLED_STATEMENT = SIMPLE_STATEMENT
                      | COMPOUND_STATEMENT
 /*           | '<<' IDENTIFIER '>>' STATEMENT */
.SIMPLE_STATEMENT =
    ASSIGNMENT_STATEMENT     | SUBPROGRAM_CALL_STATEMENT
  | EXIT_STATEMENT           | RETURN_STATEMENT
  | GOTO_STATEMENT           | ASSERT_STATEMENT
 /*  | INITIATE_STATEMENT       | DELAY_STATEMENT */
  | RAISE_STATEMENT          | ABORT_STATEMENT
 /*  | CODE_STATEMENT   */        | NULL ';'
.COMPOUND_STATEMENT =
    IF_STATEMENT  END IF
  | CASE_STATEMENT END CASE
  | LOOP_STATEMENT END LOOP IDENTIFIER_OPTION
  | SYNCHRONIZATION_STATEMENT
  | SELECT_STATEMENT END SELECT
  | BLOCK END IDENTIFIER_OPTION
.LABEL = IDENTIFIER
 
 /* 5.1 */
.ASSIGNMENT_STATEMENT = VARIABLE ':=' EXPRESSION ';'
 
 /* 5.2 */
.SUBPROGRAM_CALL_STATEMENT =  /* SUBPROGRAM_ */ NAME
                 | /* SUBPROGRAM_ */ NAME
.PARAMETERS_OPTION = | '(' PARAMETER_LIST ')'
.PARAMETER_LIST = PARAMETER_ASSOCIATION
                | PARAMETER_LIST ',' PARAMETER_ASSOCIATION
.PARAMETER_ASSOCIATION = IDENTIFIER ':=' EXPRESSION
                       | IDENTIFIER '=:' VARIABLE
                       | IDENTIFIER ':=:' VARIABLE
.FORMAL_OPTION = | FORMAL_PARAMETER ASSOCIATION
.ASSOCIATION = ':=' | '=:' | ':=:'
.FORMAL_PARAMETER = IDENTIFIER
.ACTUAL_PARAMETER = EXPRESSION
 
 /* 5.3 */
.RETURN_STATEMENT = RETURN EXPRESSION_OPTION ';'
.EXPRESSION_OPTION = | EXPRESSION
 /*------------------------------*/
 /* 5.4 */
.IF_STATEMENT =
    IF CONDITION THEN
      SEQUENCE_OF_STATEMENTS
    ELSIF_SEQUENCE
    ELSE_OPTION
    END IF ';'
.ELSIF_SEQUENCE = | ELSIF CONDITION THEN SEQUENCE_OF_STATEMENTS
.ELSE_OPTION = | ELSE SEQUENCE_OF_STATEMENTS
.CONDITION = EXPRESSION
           | CONDITION AND THEN EXPRESSION
           | CONDITION OR  ELSE EXPRESSION
 
 /* 5.5 */
.CASE_STATEMENT =
    CASE EXPRESSION OF
      WHEN_STATEMENTS_SEQUENCE
    END CASE ';'
.WHEN_STATEMENTS_SEQUENCE =
    WHEN_STATEMENTS_SEQUENCE WHEN CHOICES '=>' SEQUENCE_OF_STATEMENTS
 
 /* 5.6 */
.LOOP_STATEMENT = ITERATION_SPECIFICATION_OPTION BASIC_LOOP
.ITERATION_SPECIFICATION_OPTION = | ITERATION_SPECIFICATION
.BASIC_LOOP =
    LOOP
      SEQUENCE_OF_STATEMENTS
    END LOOP IDENTIFIER_OPTION ';'
.IDENTIFIER_OPTION = | IDENTIFIER
.ITERATION_SPECIFICATION =
    FOR LOOP_PARAMETER IN REVERSE_OPTION DISCRETE_RANGE
  | WHILE CONDITION
.REVERSE_OPTION = | REVERSE
.LOOP_PARAMETER = IDENTIFIER
 /*---------------------*/
 /* 5.7 */
.EXIT_STATEMENT = EXIT IDENTIFIER_OPTION WHEN_CONDITION_OPTION ';'
.WHEN_CONDITION_OPTION = | WHEN CONDITION
 
 /* 5.8 */
.GOTO_STATEMENT = GOTO IDENTIFIER ';'
 
 /* 5.9 */
.ASSERT_STATEMENT = ASSERT CONDITION ';'
 
 /* 6.1 */
.DECLARATIVE_PART = USE_CLAUSE        DECLARATION_LIST_OPTION
.DECLARATION_LIST_OPTION = | DECLARATION_LIST
.DECLARATION_LIST = DECLARATIVE_ITEM
     | DECLARATION_LIST DECLARATIVE_ITEM
.USE_CLAUSE_OPTION = | USE_CLAUSE
 /*.REPRESENTATION_SPECIFICATION_LIST_OPTION =
  | REPRESENTATION_SPECIFICATION_LIST_OPTION REPRESENTATION_SPECIFICATION
.BODY_SEQUENCE = | BODY_SEQUENCE BODY_
.BODY_ = VISIBILITY_RESTRICTION        UNIT_BODY | BODY_STUB
       |                               UNIT_BODY
.VISIBILITY_RESTRICTION_OPTION = | VISIBILITY_RESTRICTION
 */
.UNIT_BODY = SUBPROGRAM_BODY END DESIGNATOR_OPTION
           | MODULE_SPECIFICATION
           | MODULE_BODY END IDENTIFIER_OPTION
.BODY = SUBPROGRAM_SPECIFICATION
      | SUBPROGRAM_SPECIFICATION IS NEW NAME
      | SUBPROGRAM_SPECIFICATION IS SEPARATE
      | UNIT_BODY
      | MODULE_HEADER IS NEW NAME
      | MODULE_NATURE BODY IDENTIFIER IS SEPARATE
 /* 6.2 */
.SUBPROGRAM_DECLARATION =  SUBPROGRAM_SPECIFICATION ';'
  | SUBPROGRAM_NATURE DESIGNATOR IS GENERIC_INSTANTIATION ';'
.SUBPROGRAM_SPECIFICATION = GENERIC_CLAUSE
    SUBPROGRAM_NATURE DESIGNATOR FORMAL_PART_OPTION RETURN_OPTION
  | SUBPROGRAM_NATURE DESIGNATOR FORMAL_PART_OPTION RETURN_OPTION
.GENERIC_CLAUSE_OPTION = | GENERIC_CLAUSE
.FORMAL_PART_OPTION = | '(' PARAMETER_DECLARATION_LIST ')'
.RETURN_OPTION = | RETURN TYPE_DENOTATION
.SUBPROGRAM_NATURE = FUNCTION | PROCEDURE
.DESIGNATOR = IDENTIFIER | CHARACTER_STRING
.FORMAL_PART = '(' PARAMETER_DECLARATION_LIST ')'
.PARAMETER_DECLARATION_LIST = PARAMETER_DECLARATION
  | PARAMETER_DECLARATION_LIST ';' PARAMETER_DECLARATION
 /*-------------------------------------------------------------*/
 /*-------------------------------------------------------------------*/
 /*   A D A     DEPARTMENT OF DEFENSE HIGH ORDER LANGUAGE             */
 /*                                                                   */
 /* PRELIMINARY ADA REFERENCE MANUAL, ACM SIGPLAN NOTICES             */
 /* VOL. 14, NO. 6, JUNE 1979, PART A, APPENDIX E: SYNTAX SUMMARY     */
 /*-------------------------------------------------------------------*/
 
 /* 2.3 */
 /* IDENTIFIER IS RETURNED BY THE SCANNER */
 
 /* 2.4 */
.NUMBER = INTEGER_NUMBER | APPROXIMATE_NUMBER
.INTEGER_NUMBER = INTEGER | BASED_INTEGER
 /* INTEGER    IS RETURNED BY THE SCANNER */
.BASED_INTEGER = BASE '#' IDENTIFIER
.BASE = INTEGER
 /* EXTENDED_DIGIT = LETTER */
.APPROXIMATE_NUMBER = INTEGER '.' INTEGER EXPONENT_OPTION
  | INTEGER E EXPONENT
.EXPONENT_OPTION = | E EXPONENT
.EXPONENT = INTEGER | '+' INTEGER | '-' INTEGER
 
 /* 2.5 */
 /* CHARACTER_STRING IS RETURNED BY THE SCANNER */
 
 /* 2.7 */
.PRAGMA_ = PRAGMA IDENTIFIER ARGUMENT_PACK_OPTION ';'
.ARGUMENT_PACK_OPTION = | '(' ARGUMENT_LIST ')'
.ARGUMENT = IDENTIFIER | CHARACTER_STRING | NUMBER
 
 /* 3.1 */
.DECLARATION =
    OBJECT_DECLARATION       | TYPE_DECLARATION
  | SUBTYPE_DECLARATION      | PRIVATE_TYPE_DECLARATION
  | SUBPROGRAM_DECLARATION   | MODULE_DECLARATION
  | ENTRY_DECLARATION        | EXCEPTION_DECLARATION
  | RENAMING_DECLARATION
 
 /* 3.2 */
.OBJECT_DECLARATION =
    IDENTIFIER_LIST ':' CONSTANT_OPTION TYPE_ BECOMES_EXPRESSION_OPTION
.CONSTANT_OPTION = | CONSTANT
.BECOMES_EXPRESSION_OPTION = | ':=' EXPRESSION
.IDENTIFIER_LIST = IDENTIFIER
                 | IDENTIFIER_LIST ',' IDENTIFIER
 
 /* 3.3 */
.TYPE_ = TYPE_DEFINITION | TYPE_MARK CONSTRAINT | TYPE_MARK
.CONSTRAINT_OPTION = | CONSTRAINT
.TYPE_DEFINITION =
  | ENUMERATION_TYPE_DEFINITION  | INTEGER_TYPE_DEFINITION
  | REAL_TYPE_DEFINITION         | ARRAY_TYPE_DEFINITION
  | RECORD_TYPE_DEFINITION       | ACCESS_TYPE_DEFINITION
  | DERIVED_TYPE_DEFINITION
.TYPE_MARK = /* TYPE_, SUBTYPE_ */ NAME
.CONSTRAINT =
    RANGE_CONSTRAINT         | ACCURACY_CONSTRAINT
  | INDEX_CONSTRAINT         | DISCRIMINANT_CONSTRAINT
.TYPE_DECLARATION = TYPE IDENTIFIER IS_TYPE_DEFINITION_OPTION
.IS_TYPE_DEFINITION_OPTION = | IS TYPE_DEFINITION
.SUBTYPE_DECLARATION = SUBTYPE IDENTIFIER IS TYPE_MARK CONSTRAINT_OPTION
 
 /* 3.4 */
.DERIVED_TYPE_DEFINITION = NEW TYPE_MARK CONSTRAINT_OPTION
 
 /* 3.5 */
.RANGE_CONSTRAINT = RANGE RANGE_
.RANGE_ = SIMPLE_EXPRESSION '..' SIMPLE_EXPRESSION
 
 /* 3.5.1 */
.ENUMERATION_TYPE_DEFINITION =
  '(' ENUMERATION_LITERAL_LIST ')'
.ENUMERATION_LITERAL_LIST = ENUMERATION_LITERAL
  | ENUMERATION_LITERAL_LIST ',' ENUMERATION_LITERAL
.ENUMERATION_LITERAL = IDENTIFIER | CHARACTER_LITERAL
 
 /* 3.5.4 */
.INTEGER_TYPE_DEFINITION = RANGE_CONSTRAINT
 
 /* 3.5.5 */
.REAL_TYPE_DEFINITION = ACCURACY_CONSTRAINT
.ACCURACY_CONSTRAINT =
    DIGITS SIMPLE_EXPRESSION RANGE_CONSTRAINT_OPTION
  | DELTA  SIMPLE_EXPRESSION RANGE_CONSTRAINT_OPTION
.RANGE_CONSTRAINT_OPTION = | RANGE_CONSTRAINT
 
 /* 3.6 */
.ARRAY_TYPE_DEFINITION =
    ARRAY '(' INDEX_LIST ')' OF TYPE_MARK CONSTRAINT_OPTION
.INDEX_LIST = INDEX | INDEX_LIST ',' INDEX
.INDEX = DISCRETE_RANGE | TYPE_MARK
.DISCRETE_RANGE = RANGE_ | TYPE_MARK RANGE RANGE_
.TYPE_MARK_RANGE_OPTION = | TYPE_MARK RANGE
.INDEX_CONSTRAINT = '(' DISCRETE_RANGE_LIST ')'
.DISCRETE_RANGE_LIST = DISCRETE_RANGE
                     | DISCRETE_RANGE_LIST ',' DISCRETE_RANGE
 
 /* 3.6.2 */
.AGGREGATE = '(' COMPONENT_ASSOCIATION_LIST ')'
.COMPONENT_ASSOCIATION_LIST = COMPONENT_ASSOCIATION
  | COMPONENT_ASSOCIATION_LIST ',' COMPONENT_ASSOCIATION
.COMPONENT_ASSOCIATION =  CHOICE_LIST '=>' EXPRESSION | EXPRESSION
.CHOICES_OPTION = | CHOICE_LIST '=>'
.CHOICE_LIST = CHOICE | CHOICE_LIST '|' CHOICE
.CHOICE = SIMPLE_EXPRESSION | DISCRETE_RANGE | OTHERS
 
 /* 3.7 */
.RECORD_TYPE_DEFINITION =
    RECORD
      COMPONENT_LIST
    END RECORD
.COMPONENT_LIST = OBJECT_DECLARATION_SEQUENCE VARIANT_PART_OPTION
                | NULL ';'
.OBJECT_DECLARATION_SEQUENCE =
  | OBJECT_DECLARATION_SEQUENCE OBJECT_DECLARATION
.VARIANT_PART_OPTION = | VARIANT_PART
.VARIANT_PART =
    CASE DISCRIMINANT OF
      WHEN_SEQUENCE
    END CASE ';'
.WHEN_SEQUENCE = | WHEN_SEQUENCE WHEN CHOICES '=>' COMPONENT_LIST
.DISCRIMINANT = /* CONSTANT_COMPONENT_ */ NAME
 
 /* 3.7.3 */
.DISCRIMINANT_CONSTRAINT = AGGREGATE
 
 /* 3.8 */
.ACCESS_TYPE_DEFINITION = ACCESS TYPE_
 
 /* 4.1 */
.NAME =
    IDENTIFIER               | INDEXED_COMPONENT
  | SELECTED_COMPONENT       | PREDEFINED_ATTRIBUTE
.INDEXED_COMPONENT = NAME '(' EXPRESSION_LIST ')'
.EXPRESSION_LIST = EXPRESSION | EXPRESSION_LIST ',' EXPRESSION
.SELECTED_COMPONENT = NAME '.' IDENTIFIER
.PREDEFINED_ATTRIBUTE = NAME '"'  IDENTIFIER
 
 /* 4.2 */
.LITERAL = NUMBER | ENUMERATION_LITERAL | CHARACTER_STRING | NULL
 
 /* 4.3 */
.VARIABLE = NAME | NAME '.' ALL
          | NAME '(' DISCRETE_RANGE ')'
.DISCRETE_RANGE_PACK_OPTION = | '(' DISCRETE_RANGE ')'
.EXPRESSION = RELATION
            | EXPRESSION AND RELATION
            | EXPRESSION OR  RELATION
            | EXPRESSION XOR RELATION
.RELATION =
    SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION RELATIONAL_OPERATOR SIMPLE_EXPRESSION
  | SIMPLE_EXPRESSION NOT_OPTION IN RANGE_
  | SIMPLE_EXPRESSION NOT_OPTION IN TYPE_MARK CONSTRAINT_OPTION
.NOT_OPTION = | NOT
.SIMPLE_EXPRESSION = UNARY_OPERATOR SUM
.UNARY_OPERATOR_OPTION = | UNARY_OPERATOR
.TERM_SEQUENCE = | TERM_SEQUENCE ADDING_OPERATOR TERM
.SUM = TERM
     | SUM ADDING_OPERATOR TERM
.TERM = FACTOR
      | TERM MULTIPLYING_OPERATOR FACTOR
.FACTOR = PRIMARY
        | FACTOR '$$' PRIMARY
.PRIMARY = LITERAL | AGGREGATE | VARIABLE | ALLOCATOR
         | SUBPROGRAM_CALL | QUALIFIED_EXPRESSION | '(' EXPRESSION ')'
 
 /* 4.5 */
.LOGICAL_OPERATOR          = AND | OR | XOR
.RELATIONAL_OPERATOR         = '=' | '/=' | '<' | '<=' | '>' | '>='
.ADDING_OPERATOR             = '+' | '-' | '&'
.UNARY_OPERATOR              = '+' | '-' | NOT
.MULTIPLYING_OPERATOR        = '*' | '/' | MOD
.EXPONENTIATING_OPERATOR = '$$'
 
 /* 4.6 */
.QUALIFIED_EXPRESSION =
    TYPE_MARK '(' EXPRESSION ')' | TYPE_MARK AGGREGATE
 
 /* 4.7 */
.ALLOCATOR = NEW QUALIFIED_EXPRESSION
 
 /* 5 */
.SEQUENCE_OF_STATEMENTS = | SEQUENCE_OF_STATEMENTS STATEMENT
.STATEMENT = SIMPLE_STATEMENT | COMPOUND_STATEMENT
           | '<<' IDENTIFIER '>>' STATEMENT
.SIMPLE_STATEMENT =
    ASSIGNMENT_STATEMENT     | SUBPROGRAM_CALL_STATEMENT
  | EXIT_STATEMENT           | RETURN_STATEMENT
  | GOTO_STATEMENT           | ASSERT_STATEMENT
  | INITIATE_STATEMENT       | DELAY_STATEMENT
  | RAISE_STATEMENT          | ABORT_STATEMENT
  | CODE_STATEMENT           | NULL ';'
.COMPOUND_STATEMENT =
    IF_STATEMENT             | CASE_STATEMENT
  | LOOP_STATEMENT           | ACCEPT_STATEMENT
  | SELECT_STATEMENT         | BLOCK
 
 /* 5.1 */
.ASSIGNMENT_STATEMENT = VARIABLE ':=' EXPRESSION ';'
 
 /* 5.2 */
.SUBPROGRAM_CALL_STATEMENT = SUBPROGRAM_CALL ';'
.SUBPROGRAM_CALL = /* SUBPROGRAM_ */ NAME
                 | /* SUBPROGRAM_ */ NAME '(' PARAMETER_LIST ')'
.PARAMETERS_OPTION = | '(' PARAMETER_LIST ')'
.PARAMETER_LIST = PARAMETER_ASSOCIATION
                | PARAMETER_LIST ',' PARAMETER_ASSOCIATION
.PARAMETER_ASSOCIATION =               ACTUAL_PARAMETER
   | FORMAL_PARAMETER ASSOCIATION ACTUAL_PARAMETER
.FORMAL_OPTION = | FORMAL_PARAMETER ASSOCIATION
.ASSOCIATION = ':=' | '=:' | ':=:'
.FORMAL_PARAMETER = IDENTIFIER
.ACTUAL_PARAMETER = EXPRESSION
 
 /* 5.3 */
.RETURN_STATEMENT = RETURN EXPRESSION_OPTION ';'
.EXPRESSION_OPTION = | EXPRESSION
 
 /* 5.4 */
.IF_STATEMENT =
    IF CONDITION THEN
      SEQUENCE_OF_STATEMENTS
    ELSIF_SEQUENCE
    ELSE_OPTION
    END IF ';'
.ELSIF_SEQUENCE = | ELSIF CONDITION THEN SEQUENCE_OF_STATEMENTS
.ELSE_OPTION = | ELSE SEQUENCE_OF_STATEMENTS
.CONDITION = EXPRESSION
           | CONDITION AND THEN EXPRESSION
           | CONDITION OR  ELSE EXPRESSION
 
 /* 5.5 */
.CASE_STATEMENT =
    CASE EXPRESSION OF
      WHEN_STATEMENTS_SEQUENCE
    END CASE ';'
.WHEN_STATEMENTS_SEQUENCE =
    WHEN_STATEMENTS_SEQUENCE WHEN CHOICES '=>' SEQUENCE_OF_STATEMENTS
 
 /* 5.6 */
.LOOP_STATEMENT = ITERATION_SPECIFICATION_OPTION BASIC_LOOP
.ITERATION_SPECIFICATION_OPTION = | ITERATION_SPECIFICATION
.BASIC_LOOP =
    LOOP
      SEQUENCE_OF_STATEMENTS
    END LOOP IDENTIFIER_OPTION ';'
.IDENTIFIER_OPTION = | IDENTIFIER
.ITERATION_SPECIFICATION =
    FOR LOOP_PARAMETER IN REVERSE_OPTION DISCRETE_RANGE
  | WHILE CONDITION
.REVERSE_OPTION = | REVERSE
.LOOP_PARAMETER = IDENTIFIER
 
 /* 5.7 */
.EXIT_STATEMENT = EXIT IDENTIFIER_OPTION WHEN_CONDITION_OPTION ';'
.WHEN_CONDITION_OPTION = | WHEN CONDITION
 
 /* 5.8 */
.GOTO_STATEMENT = GOTO IDENTIFIER ';'
 
 /* 5.9 */
.ASSERT_STATEMENT = ASSERT CONDITION ';'
 
 /* 6.1 */
.DECLARATIVE_PART = USE_CLAUSE        DECLARATION_SEQUENCE
    REPRESENTATION_SPECIFICATION_SEQUENCE BODY_SEQUENCE
                  |                   DECLARATION_SEQUENCE
    REPRESENTATION_SPECIFICATION_SEQUENCE BODY_SEQUENCE
.USE_CLAUSE_OPTION = | USE_CLAUSE
.DECLARATION_SEQUENCE = | DECLARATION_SEQUENCE DECLARATION
.REPRESENTATION_SPECIFICATION_SEQUENCE =
  | REPRESENTATION_SPECIFICATION_SEQUENCE REPRESENTATION_SPECIFICATION
.BODY_SEQUENCE = | BODY_SEQUENCE BODY_
.BODY_ = VISIBILITY_RESTRICTION        UNIT_BODY | BODY_STUB
       |                               UNIT_BODY
.VISIBILITY_RESTRICTION_OPTION = | VISIBILITY_RESTRICTION
.UNIT_BODY = SUBPROGRAM_BODY | MODULE_SPECIFICATION | MODULE_BODY
 
 /* 6.2 */
.SUBPROGRAM_DECLARATION =  SUBPROGRAM_SPECIFICATION ';'
  | SUBPROGRAM_NATURE DESIGNATOR IS GENERIC_INSTANTIATION ';'
.SUBPROGRAM_SPECIFICATION = GENERIC_CLAUSE
    SUBPROGRAM_NATURE DESIGNATOR FORMAL_PART_OPTION RETURN_OPTION
  | SUBPROGRAM_NATURE DESIGNATOR FORMAL_PART_OPTION RETURN_OPTION
.GENERIC_CLAUSE_OPTION = | GENERIC_CLAUSE
.FORMAL_PART_OPTION = | FORMAL_PART
.RETURN_OPTION = | RETURN TYPE_MARK CONSTRAINT_OPTION
.SUBPROGRAM_NATURE = FUNCTION | PROCEDURE
.DESIGNATOR = IDENTIFIER | CHARACTER_STRING
.FORMAL_PART = '(' PARAMETER_DECLARATION_LIST ')'
.PARAMETER_DECLARATION_LIST = PARAMETER_DECLARATION
  | PARAMETER_DECLARATION_LIST ';' PARAMETER_DECLARATION
.PARAMETER_DECLARATION =
    IDENTIFIER_LIST ':' MODE TYPE_MARK CONSTRAINT_OPTION
      BECOMES_EXPRESSION_OPTION
.MODE = | IN | OUT | IN OUT
 
 /* 6.4 */
.SUBPROGRAM_BODY =
    SUBPROGRAM_SPECIFICATION IS
      DECLARATIVE_PART
    BEGIN
      SEQUENCE_OF_STATEMENTS
    EXCEPTION_OPTION
    END DESIGNATOR_OPTION ';'
.EXCEPTION_OPTION = | EXCEPTION EXCEPTION_HANDLER_SEQUENCE
.EXCEPTION_HANDLER_SEQUENCE = EXCEPTION_HANDLER
  | EXCEPTION_HANDLER_SEQUENCE EXCEPTION_HANDLER
.DESIGNATOR_OPTION = | DESIGNATOR
 
 /* 6.7 */
.BLOCK =
    DECLARE_OPTION
    BEGIN
      SEQUENCE_OF_STATEMENTS
    EXCEPTION_OPTION
    END IDENTIFIER_OPTION ';'
.DECLARE_OPTION = | DECLARE DECLARATIVE_PART
 
 /* 7.1 */
.MODULE_DECLARATION = VISIBILITY_RESTRICTION        MODULE_SPECIFICATION
                    |                               MODULE_SPECIFICATION
  | MODULE_NATURE IDENTIFIER DISCRETE_RANGE_PACK_OPTION IS
      GENERIC_INSTANTIATION ';'
.MODULE_SPECIFICATION =
    GENERIC_CLAUSE_OPTION
  MODULE_NATURE IDENTIFIER DISCRETE_RANGE_PACK_OPTION IS_XXX_OPTION ';'
.IS_XXX_OPTION = | IS
      DECLARATIVE_PART
    PRIVATE_PART_OPTION
    END IDENTIFIER_OPTION
.PRIVATE_PART_OPTION = | PRIVATE DECLARATIVE_PART
.MODULE_NATURE = PACKAGE | TASK
.MODULE_BODY =
    MODULE_NATURE BODY IDENTIFIER IS
      DECLARATIVE_PART
    BEGIN_PART_OPTION
    EXCEPTION_OPTION
    END IDENTIFIER_OPTION ';'
 
 /* 7.4 */
.PRIVATE_TYPE_DECLARATION =
    RESTRICTED_OPTION TYPE IDENTIFIER IS PRIVATE ';'
.RESTRICTED_OPTION = | RESTRICTED
 
 /* 8.3 */
.VISIBILITY_RESTRICTION = RESTRICTED | RESTRICTED VISIBILITY_LIST
.VISIBILITY_LIST_OPTION = | VISIBILITY_LIST
.VISIBILITY_LIST = '(' UNIT_NAME_LIST ')'
.UNIT_NAME_LIST = /* UNIT_ */ NAME | UNIT_NAME_LIST ',' /* UNIT_ */ NAME
 
 /* 8.4 */
.USE_CLAUSE = USE MODULE_NAME_LIST ';'
.MODULE_NAME_LIST = /* MODULE_ */ NAME
                  | MODULE_NAME_LIST ',' /* MODULE_ */ NAME
 
 /* 8.5 */
.RENAMING_DECLARATION =
    IDENTIFIER ':' TYPE_MARK RENAMES NAME ';'
  | IDENTIFIER ':' EXCEPTION RENAMES NAME ';'
  | SUBPROGRAM_NATURE DESIGNATOR RENAMES NAME_OPTION DESIGNATOR ';'
  | MODULE_NATURE IDENTIFIER RENAMES NAME ';'
.NAME_OPTION =  | NAME '.'
 
 /* 9.3 */
.INITIATE_STATEMENT =
    INITIATE TASK_DESIGNATOR_LIST ';'
.TASK_DESIGNATOR_LIST = TASK_DESIGNATOR
  | TASK_DESIGNATOR_LIST ',' TASK_DESIGNATOR
.TASK_DESIGNATOR = /* TASK_ */ NAME DISCRETE_RANGE_PACK_OPTION
 
 /* 9.5 */
.ENTRY_DECLARATION =
    ENTRY IDENTIFIER DISCRETE_RANGE_PACK_OPTION FORMAL_PART_OPTION ';'
.ACCEPT_STATEMENT =
    ACCEPT ENTRY_NAME FORMAL_PART_OPTION DO_XXX_OPTION ';'
.DO_XXX_OPTION = | DO
      SEQUENCE_OF_STATEMENTS
    END IDENTIFIER_OPTION
 
 /* 9.6 */
.DELAY_STATEMENT = DELAY SIMPLE_EXPRESSION ';'
 
 /* 9.7 */
.SELECT_STATEMENT =
    SELECT
      WHEN_CONDITION_OPTION
    SELECT_ALTERNATIVES
    ELSE_OPTION
    END SELECT ';'
.SELECT_ALTERNATIVES = WHEN_CONDITION_OPTION SELECT_ALTERNATIVE
  | SELECT_ALTERNATIVES OR WHEN_CONDITION_OPTION SELECT_ALTERNATIVE
.SELECT_ALTERNATIVE =
    ACCEPT_STATEMENT SEQUENCE_OF_STATEMENTS
  |  DELAY_STATEMENT SEQUENCE_OF_STATEMENTS
.STATEMENTS_OPTION = | SEQUENCE_OF_STATEMENTS
 
 /* 9.10 */
.ABORT_STATEMENT = ABORT TASK_DESIGNATOR_LIST ';'
 
 /* 10.1 */
.COMPILATION = | COMPILATION COMPILATION_UNIT
.COMPILATION_UNIT =
    VISIBILITY_RESTRICTION_OPTION SEPARATE        UNIT_BODY
  | VISIBILITY_RESTRICTION_OPTION                 UNIT_BODY
.SEPARATE_OPTION = | SEPARATE
 
 /* 10.2 */
.BODY_STUB =
    SUBPROGRAM_SPECIFICATION IS SEPARATE ';'
  | MODULE_NATURE BODY IDENTIFIER IS SEPARATE ';'
 
 /* 11.1 */
.EXCEPTION_DECLARATION = IDENTIFIER_LIST ':' EXCEPTION ';'
 
 /* 11.2 */
.EXCEPTION_HANDLER =
    WHEN EXCEPTION_CHOICES '=>' SEQUENCE_OF_STATEMENTS
.EXCEPTION_CHOICES = EXCEPTION_CHOICE
                   | EXCEPTION_CHOICES '|' EXCEPTION_CHOICE
.EXCEPTION_CHOICE = /* EXCEPTION_ */ NAME | OTHERS
 
 /* 11.3 */
.RAISE_STATEMENT = RAISE EXCEPTION_NAME_OPTION ';'
.EXCEPTION_NAME_OPTION = | /* EXCEPTION_ */ NAME
 
 /* 12.1 */
.GENERIC_CLAUSE =
    GENERIC GENERIC_PACK_OPTION
.GENERIC_PACK_OPTION = | '(' GENERIC_PARAMETER_LIST ')'
.GENERIC_PARAMETER_LIST = GENERIC_PARAMETER
                        | GENERIC_PARAMETER_LIST ';' GENERIC_PARAMETER
.GENERIC_PARAMETER =
    PARAMETER_DECLARATION
  | SUBPROGRAM_SPECIFICATION
  | RESTRICTED_OPTION TYPE IDENTIFIER
.IS_NAME_OPTION = | IS NAME_OPTION DESIGNATOR
 
 /* 12.2 */
.GENERIC_INSTANTIATION =
    NEW NAME GENERIC_ASSOCIATION_PACK_OPTION
.GENERIC_ASSOCIATION_PACK_OPTION = | '(' GENERIC_ASSOCIATIONS ')'
.GENERIC_ASSOCIATIONS = GENERIC_ASSOCIATION
                      | GENERIC_ASSOCIATIONS ',' GENERIC_ASSOCIATION
.GENERIC_ASSOCIATION =
    PARAMETER_ASSOCIATION
  | FORMAL_IS_OPTION NAME_OPTION DESIGNATOR
  | FORMAL_IS_OPTION TYPE_MARK
.FORMAL_IS_OPTION = | FORMAL_PARAMETER IS
 
 /* 13 */
.REPRESENTATION_SPECIFICATION =
    PACKING_SPECIFICATION    | LENGTH_SPECIFICATION
  | RECORD_TYPE_REPRESENTATION   | ADDRESS_SPECIFICATION
  | ENUMERATION_TYPE_REPRESENTATION
 
 /* 13.1 */
.PACKING_SPECIFICATION = FOR /* TYPE_ */ NAME USE PACKING ';'
 
 /* 13.2 */
.LENGTH_SPECIFICATION = FOR NAME USE /* STATIC_ */ EXPRESSION ';'
 
 /* 13.3 */
.ENUMERATION_TYPE_REPRESENTATION =
    FOR /* TYPE_ */ NAME USE AGGREGATE ';'
 
 
 /* 13.4 */
 RECORD_TYPE_REPRESENTATION =
    FOR /* TYPE_ */ NAME USE
      RECORD ALIGNMENT_CLAUSE_OPTION
        LOCATION_LIST
      END RECORD ';'
.ALIGNMENT_CLAUSE_OPTION = | ALIGNMENT_CLAUSE ';'
.LOCATION_LIST = /* COMPONENT_ */ NAME LOCATION ';'
  | LOCATION_LIST /* COMPONENT_ */ NAME LOCATION ';'
.LOCATION = AT /* STATIC_ */ EXPRESSION RANGE RANGE_
.ALIGNMENT_CLAUSE = AT MOD /* STATIC_ */ EXPRESSION
 
 /* 13.5 */
.ADDRESS_SPECIFICATION = FOR NAME USE AT /* STATIC_ */ EXPRESSION ';'
 
 /* 13.8 */
.CODE_STATEMENT = QUALIFIED_EXPRESSION ';'
.NOT_ACCESSIBLE = PRAGMA_
                | LOGICAL_OPERATOR
                | EXPONENTIATING_OPERATOR
.TERMINAL_NONTERMINAL = ENTRY_NAME
.NOT_LALR1 = AND THEN
           | OR ELSE
           | NAME_OPTION
.KEYWORD_NONTERMINAL = RANGE
                     | TYPE
                     | BODY
.
]
/.LOGO LOGOFF
