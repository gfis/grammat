/.ALGOL60 LOGON
/.ALGOL60 DO DO.EXTRA,('(PRIMARY)',PARM='ASSERT=50,NOSPLIT')
EOF IDENTIFIER UNSIGNED_INTEGER OPEN_STRING
[AXIOM = ALGOL60_PROGRAM.
ALGOL60_PROGRAM = BLOCK| COMPOUND_STATEMENT.
COMMENT = EMPTY | OPEN_COMMENT.
OPEN_COMMENT = PROPER_COMMENT | OPEN_COMMENT COMMENT_OR_CO_SYMBOL
  PROPER_COMMENT.
SEMICOLON = SEMI | SEMI COMMENT_SYMBOL COMMENT SEMICOLON.
ELSE_SYMBOL = ELSE.
BEGIN_SYMBOL = BEGIN| BEGIN COMMENT_SYMBOL COMMENT SEMICOLON.
END_SYMBOL = END COMMENT .
LOGICAL_VALUE = TRUE | FALSE.
INTEGER = UNSIGNED_INTEGER | PLUS UNSIGNED_INTEGER |
  MINUS UNSIGNED_INTEGER.
DECIMAL_FRACTION = POINT UNSIGNED_INTEGER.
EXPONENT_PART = TEN_TO_THE_POWER INTEGER.
DECIMAL_NUMBER = UNSIGNED_INTEGER | DECIMAL_FRACTION |
  UNSIGNED_INTEGER DECIMAL_FRACTION.
UNSIGNED_NUMBER = DECIMAL_NUMBER | EXPONENT_PART|
  DECIMAL_NUMBER EXPONENT_PART.
OPEN_STRING = PROPER_STRING | OPEN_STRING STRING PROPER_STRING.
STRING = LEFT_STRING_QUOTE OPEN_STRING RIGHT_STRING_QUOTE.
 /*
. EXPRESSIONS
------------------------------------------------------------------   */
 /*
.1. VARIABLES
__________________________                                           */
SUBSCRIPT_EXPRESSION = EXPRESSION.
SUBSCRIPT_LIST = SUBSCRIPT_EXPRESSION|
  SUBSCRIPT_LIST COMMA SUBSCRIPT_EXPRESSION.
VARIABLE = IDENTIFIER| IDENTIFIER SUB SUBSCRIPT_LIST BUS.
 /*
.2. FUNCTION_DESIGNATORS
__________________________                                           */
ACTUAL_PARAMETER = EXPRESSION | STRING.
PARAMETER_DELIMITER = COMMA | CLOSE LETTER_STRING COLON OPEN.
ACTUAL_PARAMETER_LIST = ACTUAL_PARAMETER|
  ACTUAL_PARAMETER_LIST PARAMETER_DELIMITER ACTUAL_PARAMETER.
FUNCTION_DESIGNATOR = IDENTIFIER OPEN ACTUAL_PARAMETER_LIST CLOSE.
 /*
.3. ARITHMETIC_EXPRESSIONS
__________________________                                           */
ADDING_OPERATOR = PLUS | MINUS.
MULTIPLYING_OPERATOR = TIMES | DIVIDED_BY | OVER.
RELATIONAL_OPERATOR = LESS | NOTGREATER | EQUAL | NOTLESS |
  GREATER | NOTEQUAL.
PRIMARY = UNSIGNED_NUMBER | LOGICAL_VALUE | VARIABLE |
  FUNCTION_DESIGNATOR | OPEN EXPRESSION CLOSE .
FACTOR = PRIMARY| FACTOR POWER PRIMARY.
TERM = FACTOR | TERM MULTIPLYING_OPERATOR FACTOR.
SUM = TERM | ADDING_OPERATOR TERM | SUM ADDING_OPERATOR TERM.
RELATION = SUM | SUM RELATIONAL_OPERATOR SUM.
NEGATION = RELATION | NOT RELATION.
CONJUNCTION = NEGATION | CONJUNCTION AND NEGATION.
DISJUNCTION = CONJUNCTION | DISJUNCTION OR CONJUNCTION.
IMPLICATION = DISJUNCTION | IMPLICATION IMPLIES DISJUNCTION.
EQUIVALENCE = IMPLICATION | EQUIVALENCE EQUIV IMPLICATION.
IF_CLAUSE = IF EXPRESSION THEN.
EXPRESSION = EQUIVALENCE|
  IF_CLAUSE EXPRESSION ELSE_SYMBOL EXPRESSION.
 /*
. STATEMENTS
------------------------------------------------------------------   */
 /*
.1. COMPOUND_STATEMENTS_AND_BLOCKS
__________________________                                           */
UNLABELLED_BASIC_STATEMENT = ASSIGNMENT_STATEMENT | GO_TO_STATEMENT |
  DUMMY_STATEMENT | PROCEDURE_STATEMENT.
LABEL = IDENTIFIER COLON.
BASIC_STATEMENT = UNLABELLED_BASIC_STATEMENT |
  LABEL        BASIC_STATEMENT.
UNCONDITIONAL_STATEMENT = BASIC_STATEMENT | COMPOUND_STATEMENT | BLOCK.
STATEMENT = UNCONDITIONAL_STATEMENT | CONDITIONAL_STATEMENT |
  FOR_STATEMENT.
COMPOUND_TAIL = STATEMENT END_SYMBOL |
  STATEMENT SEMICOLON COMPOUND_TAIL.
BLOCK_HEAD = BEGIN_SYMBOL DECLARATION|
  BLOCK_HEAD SEMICOLON DECLARATION.
UNLABELLED_COMPOUND = BEGIN_SYMBOL COMPOUND_TAIL.
UNLABELLED_BLOCK = BLOCK_HEAD SEMICOLON COMPOUND_TAIL.
COMPOUND_STATEMENT = UNLABELLED_COMPOUND |
  LABEL        COMPOUND_STATEMENT.
BLOCK = UNLABELLED_BLOCK | LABEL        BLOCK.
 /*
.2. ASSIGNMENT_STATEMENTS
__________________________                                           */
LEFT_PART = VARIABLE BECOMES.
LEFT_PART_LIST = LEFT_PART | LEFT_PART_LIST LEFT_PART.
ASSIGNMENT_STATEMENT = LEFT_PART_LIST EXPRESSION.
 /*
.3 GO_TO_STATEMENTS
__________________________                                           */
GO_TO_STATEMENT = GOTO EXPRESSION.
 /*
.4. DUMMY_STATEMENTS
__________________________                                           */
DUMMY_STATEMENT = EMPTY.
 /*
.5. CONDITIONAL_STATEMENTS
__________________________                                           */
IF_STATEMENT = IF_CLAUSE UNCONDITIONAL_STATEMENT.
CONDITIONAL_STATEMENT = IF_STATEMENT| IF_CLAUSE FOR_STATEMENT|
  IF_STATEMENT ELSE_SYMBOL STATEMENT|
    LABEL        CONDITIONAL_STATEMENT.
 /*
.6. FOR_STATEMENTS
__________________________                                           */
FOR_LIST_ELEMENT = EXPRESSION |
  EXPRESSION STEP EXPRESSION UNTIL EXPRESSION|
  EXPRESSION WHILE EXPRESSION.
FOR_LIST = FOR_LIST_ELEMENT | FOR_LIST COMMA FOR_LIST_ELEMENT.
FOR_CLAUSE = FOR_SYMBOL VARIABLE BECOMES FOR_LIST DO_SYMBOL.
FOR_STATEMENT = FOR_CLAUSE STATEMENT| LABEL        FOR_STATEMENT.
 /*
.7. PROCEDURE_STATEMENTS
__________________________                                           */
PROCEDURE_STATEMENT = IDENTIFIER| FUNCTION_DESIGNATOR.
 /*
. DECLARATIONS
------------------------------------------------------------------   */
DECLARATION = TYPE_DECLARATION | ARRAY_DECLARATION | SWITCH_DECLARATION |
  PROCEDURE_DECLARATION.
 /*
.1. TYPE_DECLARATIONS
__________________________                                           */
TYPE = REAL_SYMBOL| INTEGER_SYMBOL| BOOLEAN_SYMBOL.
LOCAL_OR_OWN_TYPE = TYPE | OWN_SYMBOL TYPE.
TYPE_DECLARATION = LOCAL_OR_OWN_TYPE IDENTIFIER_LIST.
 /*
.2. ARRAY_DECLARATIONS
__________________________                                           */
UPPER_BOUND = EXPRESSION.
LOWER_BOUND = EXPRESSION.
BOUND_PAIR = LOWER_BOUND COLON UPPER_BOUND.
BOUND_PAIR_LIST = BOUND_PAIR| BOUND_PAIR_LIST COMMA BOUND_PAIR.
ARRAY_SEGMENT = IDENTIFIER_LIST  SUB BOUND_PAIR_LIST BUS.
ARRAY_TYPE = ARRAY_SYMBOL| LOCAL_OR_OWN_TYPE ARRAY_SYMBOL.
ARRAY_DECLARATION = ARRAY_TYPE ARRAY_SEGMENT|
  ARRAY_DECLARATION COMMA ARRAY_SEGMENT.
 /*
.3. SWITCH_DECLARATIONS
__________________________                                           */
SWITCH_LIST = EXPRESSION| SWITCH_LIST COMMA EXPRESSION.
SWITCH_DECLARATION = SWITCH_SYMBOL IDENTIFIER BECOMES SWITCH_LIST.
 /*
.4. PROCEDURE_DECLARATIONS
__________________________                                           */
FORMAL_PARAMETER = IDENTIFIER.
FORMAL_PARAMETER_LIST = FORMAL_PARAMETER|
  FORMAL_PARAMETER_LIST PARAMETER_DELIMITER FORMAL_PARAMETER.
FORMAL_PARAMETER_PART = OPEN FORMAL_PARAMETER_LIST CLOSE SEMICOLON.
IDENTIFIER_LIST = IDENTIFIER | IDENTIFIER_LIST COMMA IDENTIFIER.
VALUE_PART = VALUE_SYMBOL IDENTIFIER_LIST SEMICOLON.
SPECIFIER = STRING_SYMBOL| TYPE | ARRAY_SYMBOL| TYPE ARRAY_SYMBOL|
  LABEL_SYMBOL| SWITCH_SYMBOL| PROCEDURE_SYMBOL|
  TYPE PROCEDURE_SYMBOL.
SPECIFICATION_PART =         SPECIFIER IDENTIFIER_LIST SEMICOLON|
  SPECIFICATION_PART SPECIFIER IDENTIFIER_LIST SEMICOLON.
PROCEDURE_HEADING = PROCEDURE_SYMBOL IDENTIFIER |
  TYPE PROCEDURE_SYMBOL IDENTIFIER.
PARAMETER_PART = SEMICOLON| FORMAL_PARAMETER_PART|
  FORMAL_PARAMETER_PART SPECIFICATION_PART|
  FORMAL_PARAMETER_PART VALUE_PART SPECIFICATION_PART.
PROCEDURE_BODY = STATEMENT| CODE_SYMBOL.
PROCEDURE_DECLARATION =
  PROCEDURE_HEADING PARAMETER_PART PROCEDURE_BODY.
   ..
TERM = FACTOR | TERM TIMES FACTOR | TERM OVER FACTOR |
  TERM DIVIDED_BY FACTOR.
]
/LOGOFF
