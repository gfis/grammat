/.BOFOR LOGON
/.BOFOR DO DO.EXTRA,('(PRIMARY)',PARM='FORTNR=1,ASSERC=1,NOSPLIT')
 /*------------------------------------------------------------------*/
 /*   B O F O R       APRIL 09, 1980      GEORG FISCHER              */
 /*------------------------------------------------------------------*/
EOF IDENTIFIER NUMBER STRING
 /*--------------------------------------------------------------*/
 /*  METAGRAMMATIK FUER GRAMMATIKEN                             */
 /*--------------------------------------------------------------*/
[AXIOM          = EXTRA_INPUT
.EXTRA_INPUT        = '[' SYNTAX ']' STATEMENTS              => #1
                | EXTRA_INPUT '[' SYNTAX ']' STATEMENTS      => #1
.SYNTAX         = RULES                                  => #2
.LEFT_SIDE      = IDENTIFIER                             => #3
.RULES          = RULE
                | RULES '.' RULE
.RULE           = LEFT_SIDE '=' RIGHT_SIDES              => #4
                | LEFT_SIDE '-' RIGHT_SIDES              => #5
.RIGHT_SIDES    = RIGHT_SIDE
                | RIGHT_SIDES '|' RIGHT_SIDE
.RIGHT_SIDE     = SYNTAX_PART SEMANTIC_PART
.SYNTAX_PART    = MEMBERETIES                            => #6
.STATEMENTS     =
.MEMBERETIES    =                                        => #7
                | MEMBERETIES MEMBER
.MEMBER         = PRIMARY
.PRIMARY        = IDENTIFIER                             => #8
                | STRING                                 => #9
                | NUMBER                                 => #8
.SEMANTIC_PART  = TRANSLATIONETY GENERATIONETIES         => #10
.TRANSLATIONETY =                                        => #11
                | '=>' ELEMENTETIES                      => #12
.ELEMENTETIES   =                                        => #13
                | ELEMENTS
.ELEMENTS       = ELEMENT
                | ELEMENTS ELEMENT
.ELEMENT        = STRING                                 => #14
                | IDENTIFIER                             => #15
                | NUMBER                                 => #16
                | IDENTIFIER ':' NUMBER                  => #17
                | '#' NUMBER                             => #18
                | '@'                                    => #19
                | '%' NUMBER                             => #20
                | COMBINED_SYMBOL COMBINED_ELEM
.COMBINED_SYMBOL= IDENTIFIER                             => #21
.COMBINED_ELEM  = '(' ELEMENTS ')'                       => #22
.GENERATIONETIES=
                | GENERATIONETIES GENERATION
.GENERATION     = '->' ACCUMULATOR '=' ELEMENTETIES      => #23
.ACCUMULATOR    =                                        => #24
                | IDENTIFIER                             => #25
.RULE = LOAD  DDNAME        => #30
      | STORE DDNAME        => #31
      | READ  DDNAME        => #32
      | WRITE DDNAME        => #33
.DDNAME = IDENTIFIER        => #34
.RULE = PARM STRING         => #35
.
]
[STATEMENTS =
  -> ELSE_AC   = #26
  -> ELSEIF_AC = #26
  -> ENDIF_AC  = #26
  -> WHILE_AC  = #26
  -> ENDWH_AC  = #26
            | STATEMENTS PROGRAM_UNIT
.PROGRAM_UNIT = MAIN_PROGRAM
              | FUNCTION_SUBPROGRAM
              | SUBROUTINE_SUBPROGRAM
              | BLOCK_DATA_SUBPROGRAM
.MAIN_PROGRAM          =   PROGRAM_STATEMENT     EOS_  UNIT_BODY
.  FUNCTION_SUBPROGRAM =   FUNCTION_STATEMENT    EOS_  UNIT_BODY
.SUBROUTINE_SUBPROGRAM = SUBROUTINE_STATEMENT    EOS_  UNIT_BODY
.BLOCK_DATA_SUBPROGRAM = BLOCK_DATA_STATEMENT    EOS_  UNIT_BODY
.PROGRAM_STATEMENT = PROGRAM IDENTIFIER
.END_STATEMENT = LABEL_OPTION END                          EOS_
               => %1 LABEL_OPTION %7 RETURN %7 END
               -> = L_1 L_2 L_3 
.UNIT_BODY = GROUP_1 GROUP_4 END_STATEMENT
.GROUP_1 =
         | GROUP_1 LABEL_       FORMAT_STATEMENT           EOS_
         | GROUP_1 LABEL_OPTION OTHER_SPECIFICATION_STATEMENT  EOS_
         | GROUP_1 LABEL_OPTION DATA_STATEMENT             EOS_
.GROUP_4 =         LABEL_OPTION EXECUTABLE_STATEMENT       EOS_
         | GROUP_4 LABEL_       FORMAT_STATEMENT           EOS_
         | GROUP_4 LABEL_OPTION EXECUTABLE_STATEMENT       EOS_
.LABEL_OPTION = 
              | LABEL_
.LABEL_      = NUMBER
.LABEL_USAGE = NUMBER
.OTHER_SPECIFICATION_STATEMENT =
    DIMENSION_STATEMENT
  | COMMON_STATEMENT
  | TYPE_STATEMENT
  | EXTERNAL_STATEMENT
.EXECUTABLE_STATEMENT =
    ASSIGNMENT_STATEMENT
  | GOTO_STATEMENT
  | LOGICAL_IF_STATEMENT
  | BLOCK_IF_STATEMENT
  | ELSE_IF_STATEMENT
  | ELSE_STATEMENT
  | END_IF_STATEMENT
  | DO_STATEMENT
  | CONTINUE_STATEMENT
  | STOP_STATEMENT
  | PAUSE_STATEMENT
  | READ_STATEMENT
  | WRITE_STATEMENT
  | REWIND_STATEMENT
  | BACKSPACE_STATEMENT
  | ENDFILE_STATEMENT
  | OPEN_STATEMENT
  | CALL_STATEMENT
  | RETURN_STATEMENT
.ENTRY_LIST = IDENTIFIER
            | IDENTIFIER '(' ')'
.FORMAL_PARAMETER_LIST = FORMAL_PARAMETER
                       | FORMAL_PARAMETER_LIST ',' FORMAL_PARAMETER
.FORMAL_PARAMETER = IDENTIFIER
.FUNCTION_STATEMENT = NON_CHAR_TYPE FUNCTION ENTRY_LIST
.SUBROUTINE_STATEMENT = SUBROUTINE ENTRY_LIST
.NON_CHAR_TYPE =
    INTEGER
  | INTEGER '*' 4  => REAL
  | REAL
  | REAL '*' 8     => DOUBLE PRECISION
  | DOUBLE PRECISION
  | LOGICAL
.BLOCK_DATA_STATEMENT = BLOCK DATA
                      | BLOCK DATA IDENTIFIER
.ARRAY_DECLARATOR = IDENTIFIER '(' BOUND_LIST ')'
.BOUND_LIST = BOUND_
            | BOUND_LIST ',' BOUND_
.BOUND_ = INT2_EXPRESSION
.COMMON_STATEMENT = COMMON COMMON_BLOCK
                  | COMMON_STATEMENT ',' COMMON_BLOCK
                  | COMMON_STATEMENT     COMMON_BLOCK
                  | COMMON_STATEMENT ',' COMMON_ELEMENT
.COMMON_BLOCK = '/' IDENTIFIER '/' COMMON_ELEMENT
.COMMON_ELEMENT = IDENTIFIER
.TYPE_STATEMENT = NON_CHAR_TYPE SPECIFICATION_LIST
                | CHARACTER LEN_OPTION CHAR_SPEC_LIST
.SPECIFICATION_LIST = SPECIFICATION
                    | SPECIFICATION_LIST ',' SPECIFICATION
.SPECIFICATION = IDENTIFIER
               | IDENTIFIER '(' BOUND_LIST ')'
.CHAR_SPEC_LIST = SPECIFICATION LEN_OPTION
                | CHAR_SPEC_LIST ',' SPECIFICATION LEN_OPTION
.LEN_OPTION =
            | '*' LEN_SPECIFICATION
.LEN_SPECIFICATION = '(' '*' ')'
                   | NUMBER
.EXTERNAL_STATEMENT = EXTERNAL IDENTIFIER
  | EXTERNAL_STATEMENT ',' IDENTIFIER
.DATA_STATEMENT = DATA DATA_BLOCK
                | DATA_STATEMENT ',' DATA_BLOCK
                | DATA_STATEMENT     DATA_BLOCK
.DATA_BLOCK = DATA_LIST '/' DATA_CONSTANT_LIST '/'
.DATA_LIST = DATA_ELEMENT
           | DATA_LIST ',' DATA_ELEMENT
.DATA_ELEMENT = IDENTIFIER
              | ARRAY_ELEMENT_NAME
.DATA_CONSTANT_LIST = DATA_CONSTANT
                    | DATA_CONSTANT_LIST ',' DATA_CONSTANT
.DATA_CONSTANT =  NUMBER
               |  REAL_CONSTANT
               |  STRING
.GOTO_STATEMENT = UNCONDITIONAL_GOTO
                | COMPUTED_GOTO
.UNCONDITIONAL_GOTO = GOTO_SYMBOL LABEL_USAGE
.GOTO_SYMBOL = GO TO | GOTO
.COMPUTED_GOTO = GOTO_SYMBOL '(' LABEL_USAGE_LIST ')' ',' INT2_NAME
.LABEL_USAGE_LIST = LABEL_USAGE
            | LABEL_USAGE_LIST ',' LABEL_USAGE
.LOGICAL_IF_STATEMENT = IF '(' LOG1_EXPRESSION ')'
                          EXECUTABLE_STATEMENT
.BLOCK_IF_STATEMENT = IF '(' LOG1_EXPRESSION ')' THEN
   =>             %7 IF '(' '.' NOT '.' '(' LOG1_EXPRESSION
                       ')' ')' GOTO ELSE_AC
   -> ENDIF_AC = #26
.ELSE_IF_STATEMENT = ELSE IF '(' LOG1_EXPRESSION ')' THEN
   =>             %7 GOTO ENDIF_AC
      %1 ELSE_AC  %7 IF '(' '.' NOT '.' '(' LOG1_EXPRESSION
                       ')' ')' GOTO ELSEIF_AC
   -> ENDIF_AC = ENDIF_AC
   -> ELSE_AC = ELSEIF_AC
   -> ELSEIF_AC = #26
.ELSE_STATEMENT = ELSE
   =>             %7 GOTO ENDIF_AC
      %1 ELSE_AC  %7 CONTINUE
   -> ELSE_AC = #26 
   -> ENDIF_AC = ENDIF_AC
.END_IF_STATEMENT = END IF
   => %1 ELSE_AC  %7 CONTINUE
      %1 ENDIF_AC %7 CONTINUE
   -> ELSE_AC = #26
   -> ENDIF_AC = #26
.DO_STATEMENT = DO LABEL_USAGE DO_CONTROL
.DO_CONTROL = INT2_NAME '=' INT2_EXPRESSION ',' INT2_EXPRESSION
             INCREMENT_OPTION
.INCREMENT_OPTION =
                  | ',' INT2_EXPRESSION
.CONTINUE_STATEMENT = CONTINUE
.STOP_STATEMENT = STOP  MESSAGE_OPTION
.PAUSE_STATEMENT = PAUSE MESSAGE_OPTION
.MESSAGE_OPTION =
                | NUMBER
                | STRING
.WRITE_STATEMENT = WRITE IO_SPECIFICATION
. READ_STATEMENT = READ  IO_SPECIFICATION
.IO_SPECIFICATION = '(' CONTROL_INFO_LIST ')' IO_LIST
                  | '(' CONTROL_INFO_LIST ')'
.CONTROL_INFO_LIST = UNIT_IDENTIFIER
                   | UNIT_IDENTIFIER ',' FORMAT_IDENTIFIER
                   | UNIT_IDENTIFIER ',' FORMAT_IDENTIFIER ','
                       CONTROL_SPEC_LIST
.UNIT_IDENTIFIER = IDENTIFIER
                 | IDENTIFIER '''' IDENTIFIER
.CONTROL_SPEC_LIST = CONTROL_SPEC
                   | CONTROL_SPEC_LIST ',' CONTROL_SPEC
.CONTROL_SPEC = ERR     '=' LABEL_USAGE
              | END     '=' LABEL_USAGE
.IO_LIST = IO_LIST_ELEMENT
         | IO_LIST ',' IO_LIST_ELEMENT
.IO_LIST_ELEMENT = VARIABLE
                 | IO_IMPLIED_DO_LIST
.IO_IMPLIED_DO_LIST = '(' IO_LIST ',' DO_CONTROL ')'
.OPEN_STATEMENT = DEFINE FILE '(' IDENTIFIER
                    ',' NUMBER
                    ',' NUMBER
                    ',' IDENTIFIER ')'
.BACKSPACE_STATEMENT = BACKSPACE TAPE_SPEC
.ENDFILE_STATEMENT = ENDFILE TAPE_SPEC
.REWIND_STATEMENT = REWIND TAPE_SPEC
.TAPE_SPEC = UNIT_IDENTIFIER
.FORMAT_IDENTIFIER = LABEL_USAGE
                   | IDENTIFIER
.FORMAT_STATEMENT = FORMAT '(' FORMAT_SPECIFICATION ')'
.FORMAT_SPECIFICATION
   = FORMAT_ELEMENT
   | FORMAT_SPECIFICATION ',' FORMAT_ELEMENT
.FORMAT_ELEMENT = FORMAT_ITEM
                | NUMBER FORMAT_ITEM
.FORMAT_ITEM = X
             | '/'
             | '//'
             | I NUMBER
             | F NUMBER '.' NUMBER
             | E NUMBER '.' NUMBER
             | A NUMBER
             | '(' FORMAT_SPECIFICATION ')'
             | STRING
             | L NUMBER
.CALL_STATEMENT = CALL IDENTIFIER ACTUAL_PARAMETERS_OPTION
.ACTUAL_PARAMETERS_OPTION =
                          | '(' ACTUAL_PARAMETERS ')'
.ACTUAL_PARAMETERS = ACTUAL_PARAMETER
                   | ACTUAL_PARAMETERS ',' ACTUAL_PARAMETER
.ACTUAL_PARAMETER 
   = INT2_EXPRESSION
  | INT4_EXPRESSION
  | REAL_EXPRESSION
  | DBLE_EXPRESSION
  | CHAR_VARIABLE
  | POINTER_VARIABLE
.RETURN_STATEMENT = RETURN
.ARRAY_ELEMENT_NAME = IDENTIFIER SUBSCRIPT_SPEC
.SUBSCRIPT_SPEC = '(' SUBSCRIPT_LIST ')'
.SUBSCRIPT_LIST = INT2_EXPRESSION
                | SUBSCRIPT_LIST ',' INT2_EXPRESSION
.SUBSTRING_SPEC = '(' INT2_EXPRESSION ':' INT2_EXPRESSION ')'
.ASSIGNMENT_STATEMENT
  = INT2_VARIABLE '=' INT2_EXPRESSION
  | INT2_VARIABLE '=' INT4_EXPRESSION
  | INT2_VARIABLE '=' REAL_EXPRESSION
  | INT2_VARIABLE '=' DBLE_EXPRESSION
  | INT4_VARIABLE '=' INT2_EXPRESSION
  | INT4_VARIABLE '=' INT4_EXPRESSION
  | INT4_VARIABLE '=' REAL_EXPRESSION
  | INT4_VARIABLE '=' DBLE_EXPRESSION
  | REAL_VARIABLE '=' INT2_EXPRESSION
  | REAL_VARIABLE '=' INT4_EXPRESSION
  | REAL_VARIABLE '=' REAL_EXPRESSION
  | DBLE_VARIABLE '=' INT2_EXPRESSION
  | DBLE_VARIABLE '=' INT4_EXPRESSION
  | DBLE_VARIABLE '=' REAL_EXPRESSION
  | DBLE_VARIABLE '=' DBLE_EXPRESSION
  | CHAR_ASSIGNMENT
.INT2_EXPRESSION =         INT2_TERM
  |                 ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP INT2_TERM
.INT4_EXPRESSION =         INT4_TERM
  |                 ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP INT2_TERM 
  | INT2_EXPRESSION ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP INT4_TERM
.REAL_EXPRESSION =         REAL_TERM
  |                 ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP REAL_TERM
.DBLE_EXPRESSION =         DBLE_TERM
  |                 ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP DBLE_TERM
.ADD_OP = '+'
        | '-'
.INT2_TERM =          INT2_FACTOR
  | INT2_TERM MULT_OP INT2_FACTOR
.INT4_TERM =          INT4_FACTOR
  | INT4_TERM MULT_OP INT2_FACTOR 
  | INT2_TERM MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP INT4_FACTOR
.REAL_TERM =          REAL_FACTOR
  | REAL_TERM MULT_OP INT2_FACTOR
  | INT2_TERM MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP REAL_FACTOR
.DBLE_TERM =          DBLE_FACTOR
  | DBLE_TERM MULT_OP INT2_FACTOR
  | INT2_TERM MULT_OP DBLE_FACTOR
  | DBLE_TERM MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP DBLE_FACTOR
  | DBLE_TERM MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP DBLE_FACTOR
  | DBLE_TERM MULT_OP DBLE_FACTOR
.MULT_OP = '*'
         | '/'
.INT2_FACTOR =       INT2_PRIMARY
  | INT2_FACTOR '**' INT2_PRIMARY
.INT4_FACTOR =       INT4_PRIMARY
  | INT4_FACTOR '**' INT2_PRIMARY 
  | INT2_FACTOR '**' INT4_PRIMARY
  | INT4_FACTOR '**' INT4_PRIMARY
.REAL_FACTOR =       REAL_PRIMARY
  | REAL_FACTOR '**' INT2_PRIMARY
  | INT2_FACTOR '**' REAL_PRIMARY
  | REAL_FACTOR '**' INT4_PRIMARY
  | INT4_FACTOR '**' REAL_PRIMARY
  | REAL_FACTOR '**' REAL_PRIMARY
.DBLE_FACTOR =       DBLE_PRIMARY
  | DBLE_FACTOR '**' INT2_PRIMARY
  | INT2_FACTOR '**' DBLE_PRIMARY
  | DBLE_FACTOR '**' INT4_PRIMARY
  | INT4_FACTOR '**' DBLE_PRIMARY
  | DBLE_FACTOR '**' REAL_PRIMARY
  | REAL_FACTOR '**' DBLE_PRIMARY
  | DBLE_FACTOR '**' DBLE_PRIMARY
.INT2_PRIMARY = INT2_VARIABLE
              | NUMBER
.INT4_PRIMARY = INT4_VARIABLE
.REAL_PRIMARY = REAL_VARIABLE
              | REAL_CONSTANT
.REAL_CONSTANT = NUMBER E_FRACTION
               | E_FRACTION
               | NUMBER '.'
.E_FRACTION = '.' NUMBER
            | '.' E_EXPONENT
            | '.' NUMBER E_EXPONENT
.E_EXPONENT = E SIGN_OPTION NUMBER
.DBLE_PRIMARY = DBLE_VARIABLE
              | DBLE_CONSTANT
.DBLE_CONSTANT = NUMBER D_FRACTION
               | D_FRACTION
.D_FRACTION = '.' D_EXPONENT
            | '.' NUMBER D_EXPONENT
.D_EXPONENT = D SIGN_OPTION NUMBER
.CHAR_ASSIGNMENT = CHAR_VARIABLE '=' CHAR_TERM
                 | CHAR_ASSIGNMENT '//' CHAR_TERM
.CHAR_TERM = CHAR_VARIABLE
           | STRING
.CHAR_VARIABLE = CHAR_NAME
               | CHAR_NAME SUBSCRIPT_SPEC
               | CHAR_NAME SUBSTRING_SPEC
               | CHAR_NAME SUBSCRIPT_SPEC SUBSTRING_SPEC
.INT2_VARIABLE = INT2_NAME
               | INT2_NAME SUBSCRIPT_SPEC
.INT2_NAME = IDENTIFIER
.INT4_VARIABLE = INT4_NAME
               | INT4_NAME SUBSCRIPT_SPEC
.REAL_VARIABLE = REAL_NAME
               | REAL_NAME SUBSCRIPT_SPEC
.DBLE_VARIABLE = DBLE_NAME
               | DBLE_NAME SUBSCRIPT_SPEC
.LOG1_EXPRESSION = LOG1_TERM
  | LOG1_EXPR '.' OR '.' LOG1_TERM
.LOG1_TERM = LOG1_FACTOR
  | LOG1_TERM '.' AND '.' LOG1_FACTOR
.LOG1_FACTOR = RELATION
  | '.' NOT '.' LOG1_FACTOR
.RELATION
  = INT2_EXPRESSION REL_OP INT2_EXPRESSION
  | INT2_EXPRESSION REL_OP INT4_EXPRESSION
  | INT2_EXPRESSION REL_OP REAL_EXPRESSION
  | INT2_EXPRESSION REL_OP DBLE_EXPRESSION
  | INT4_EXPRESSION REL_OP INT2_EXPRESSION
  | INT4_EXPRESSION REL_OP INT4_EXPRESSION
  | INT4_EXPRESSION REL_OP REAL_EXPRESSION
  | INT4_EXPRESSION REL_OP DBLE_EXPRESSION
  | REAL_EXPRESSION REL_OP INT2_EXPRESSION
  | REAL_EXPRESSION REL_OP INT4_EXPRESSION
  | REAL_EXPRESSION REL_OP REAL_EXPRESSION
  | REAL_EXPRESSION REL_OP DBLE_EXPRESSION
  | DBLE_EXPRESSION REL_OP INT2_EXPRESSION
  | DBLE_EXPRESSION REL_OP INT4_EXPRESSION
  | DBLE_EXPRESSION REL_OP REAL_EXPRESSION
  | DBLE_EXPRESSION REL_OP DBLE_EXPRESSION
  | CHAR_VARIABLE   REL_OP CHAR_VARIABLE
.REL_OP = '.' LT '.'
        | '.' LE '.'
        | '.' EQ '.'
        | '.' NE '.'
        | '.' GE '.'
        | '.' GT '.'
.OTHER_SPECIFICATION_STATEMENT = RECORD_BLOCK
                               | DECLARE_STATEMENT
.RECORD_BLOCK = RECORD '<' IDENTIFIER '>' EOS_
                  RECORD_BODY
                END '<' IDENTIFIER '>' /* EOS_ FROM GROUP_1 */
.RECORD_BODY = TYPE_STATEMENT EOS_
             | RECORD_BODY TYPE_STATEMENT EOS_
.TYPE_STATEMENT = POINTER_STATEMENT
.POINTER_STATEMENT = SPEED_OPTION '<' RECORD_NAME '>'
                       POINTER POINTER_LIST 
  => %7 DOUBLE PRECISION POINTER_LIST
.SPEED_OPTION =
              | FAST
              | SLOW
.RECORD_NAME = IDENTIFIER
.POINTER_LIST = POINTER_ELEMENT
              | POINTER_LIST ',' POINTER_ELEMENT
.POINTER_ELEMENT = IDENTIFIER
                 | ARRAY_DECLARATOR
.DECLARE_STATEMENT = DECLARE '<' RECORD_NAME '>' DECLARE_LIST
.DECLARE_LIST = DECLARE_ELEMENT
              | DECLARE_LIST ',' DECLARE_ELEMENT
.DECLARE_ELEMENT = IDENTIFIER
                 | ARRAY_DECLARATOR   /* ??? */
.EXECUTABLE_STATEMENT = ALLOCATION
                      | TRANSPORT_STATEMENT
                      | SELECTOR_ASSIGNMENT
                      | POINTER_ASSIGNMENT
.POINTER_ASSIGNMENT = POINTER_VARIABLE '==' POINTER_VARIABLE
.ALLOCATION = ALLOCATE '<' RECORD_NAME '>'  POINTER_VARIABLE
            | FREE POINTER_VARIABLE
.POINTER_VARIABLE = VARIABLE
.TRANSPORT_STATEMENT  = TRANSPORT_PART => TRANS_AC
.TRANSPORT_PART
  = DIRECTION '(' POINTER_VARIABLE ')' TRANSPORT_ELEMENT
  => DIRECTION ' S/F' '(' POINTER_VARIABLE ',' TRANSPORT_ELEMENT ')'
  -> TRANS_AC =
     DIRECTION ' S/F' '(' POINTER_VARIABLE
  | TRANSPORT_STATEMENT ',' TRANSPORT_ELEMENT
  => TRANS_AC ',' TRANSPORT_ELEMENT ')'
  -> TRANS_AC = TRANS_AC
.DIRECTION = GET => %7 CALL ZZGE
           | PUT => %7 CALL ZZPU
.TRANSPORT_ELEMENT = DECLARED_VARIABLE
                   | SELECTOR_VARIABLE
.DECLARED_VARIABLE = VARIABLE
.SELECTOR_VARIABLE = DECLARED_VARIABLE '.' VARIABLE
                   | DECLARED_VARIABLE '.' SELECTOR_VARIABLE
.SELECTOR_ASSIGNMENT = SELECTOR_VARIABLE '=' INT2_EXPRESSION
  => %7 CALL ZZI2S '(' INT2_EXPRESSION ',' SELECTOR_VARIABLE ')'  
                     | SELECTOR_VARIABLE '=' INT4_EXPRESSION
  => %7 CALL ZZI4S '(' INT4_EXPRESSION ',' SELECTOR_VARIABLE ')'  
                     | SELECTOR_VARIABLE '=' REAL_EXPRESSION
  => %7 CALL ZZRES '(' REAL_EXPRESSION ',' SELECTOR_VARIABLE ')'  
                     | SELECTOR_VARIABLE '=' DBLE_EXPRESSION
  => %7 CALL ZZDPS '(' DBLE_EXPRESSION ',' SELECTOR_VARIABLE ')'  
                     | SELECTOR_VARIABLE '=' CHAR_EXPRESSION
  => %7 CALL ZZCHS '(' CHAR_EXPRESSION ',' SELECTOR_VARIABLE ')'  
.EOS_ = ';'
]
     PROGRAM BOFOR;
     FAST <REC> POINTER RECP;
      ALLOCATE <REC> RECP;
      FREE RECP;
      GET (RECP) ALPHA,BETA, GAMMA(10);
     IF (X=Y) THEN;
     ELSE;
      X=YELSE;
      END IF;
      GOTO 2000;
      X.R=2000;
      END;
/LOGOFF
