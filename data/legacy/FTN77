 /*------------------------------------------------------------------*/
 /*   F O R T R A N   7 7                                            */
 /*   ANSI X3.9-1978                                                 */
 /*   AMERICAN NATIONAL STANDARD PROGRAMMING LANGUAGE FORTRAN        */
 /*------------------------------------------------------------------*/
EOS_ SYMBOLIC_NAME UNSIGNED_INT_CONSTANT CHARACTER_CONSTANT
[AXIOM = EXECUTABLE_PROGRAM
.EXECUTABLE_PROGRAM = PROGRAM_UNIT
                    | EXECUTABLE_PROGRAM PROGRAM_UNIT
.PROGRAM_UNIT = MAIN_PROGRAM
              | FUNCTION_SUBPROGRAM
              | SUBROUTINE_SUBPROGRAM
              | BLOCK_DATA_SUBPROGRAM
.MAIN_PROGRAM = PROGRAM_STATEMENT EOS_ UNIT_BODY
              |                        UNIT_BODY
.PROGRAM_STATEMENT = PROGRAM SYMBOLIC_NAME
.FUNCTION_SUBPROGRAM = FUNCTION_STATEMENT        EOS_  UNIT_BODY
.SUBROUTINE_SUBPROGRAM = SUBROUTINE_STATEMENT    EOS_  UNIT_BODY
.BLOCK_DATA_SUBPROGRAM = BLOCK_DATA_STATEMENT    EOS_  UNIT_BODY
.END_STATEMENT = LABEL_OPTION END                          EOS_
.BLOCK_DATA_BODY =
                 | BLOCK_DATA_BODY BLOCK_DATA_SPECIFICATION EOS_
.UNIT_BODY = GROUP_1 GROUP_4 END_STATEMENT
.GROUP_1 =
         | GROUP_1 LABEL_       FORMAT_STATEMENT           EOS_
         | GROUP_1 LABEL_OPTION ENTRY_STATEMENT            EOS_
         | GROUP_1 LABEL_OPTION PARAMETER_STATEMENT        EOS_
         | GROUP_1 LABEL_OPTION IMPLICIT_STATEMENT         EOS_
         | GROUP_1 LABEL_OPTION OTHER_SPECIFICATION_STATEMENT  EOS_
         | GROUP_1 LABEL_OPTION DATA_STATEMENT             EOS_
.GROUP_2 =
         | GROUP_2 LABEL_       FORMAT_STATEMENT           EOS_
         | GROUP_2 LABEL_OPTION ENTRY_STATEMENT            EOS_
         | GROUP_2 LABEL_OPTION PARAMETER_STATEMENT        EOS_
         | GROUP_2 LABEL_OPTION OTHER_SPECIFICATION_STATEMENT  EOS_
.GROUP_3 =
         | GROUP_3 LABEL_       FORMAT_STATEMENT           EOS_
         | GROUP_3 LABEL_OPTION ENTRY_STATEMENT            EOS_
         | GROUP_3 LABEL_OPTION DATA_STATEMENT             EOS_
         | GROUP_3 LABEL_OPTION STATEMENT_FUNCTION_STATEMENT EOS_
.GROUP_4 =         LABEL_OPTION EXECUTABLE_STATEMENT       EOS_
         | GROUP_4 LABEL_       FORMAT_STATEMENT           EOS_
         | GROUP_4 LABEL_OPTION ENTRY_STATEMENT            EOS_
         | GROUP_4 LABEL_OPTION DATA_STATEMENT             EOS_
         | GROUP_4 LABEL_OPTION EXECUTABLE_STATEMENT       EOS_
.LABEL_OPTION =
              | LABEL_
.LABEL_ = NONZERO_UNSIGNED_INT_CONST
.LABEL_USAGE = NONZERO_UNSIGNED_INT_CONST
.OTHER_SPECIFICATION_STATEMENT =
    DIMENSION_STATEMENT
  | EQUIVALENCE_STATEMENT
  | COMMON_STATEMENT
  | TYPE_STATEMENT
  | EXTERNAL_STATEMENT
  | INTRINSIC_STATEMENT
  | SAVE_STATEMENT
.BLOCK_DATA_SPECIFICATION =
    DIMENSION_STATEMENT
  | IMPLICIT_STATEMENT
  | PARAMETER_STATEMENT
  | COMMON_STATEMENT
  | SAVE_STATEMENT
  | EQUIVALENCE_STATEMENT
  | DATA_STATEMENT
  | TYPE_STATEMENT
.EXECUTABLE_STATEMENT =
    ASSIGNMENT_STATEMENT
  | GOTO_STATEMENT
  | ARITHMETIC_IF_STATEMENT
  | LOGICAL_IF_STATEMENT
  | BLOCK_IF_STATEMENT
  | ELSE_IF_STATEMENT
  | ELSE_STATEMENT
  | END_IF_STATEMENT
  | DO_STATEMENT
  | CONTINUE_STATEMENT
  | STOP_STATEMENT
  | PAUSE_STATEMENT
  | READ_STATEMENT
  | WRITE_STATEMENT
  | PRINT_STATEMENT
  | REWIND_STATEMENT
  | BACKSPACE_STATEMENT
  | ENDFILE_STATEMENT
  | OPEN_STATEMENT
  | CLOSE_STATEMENT
  | INQUIRE_STATEMENT
  | CALL_STATEMENT
  | RETURN_STATEMENT
.ENTRY_STATEMENT = ENTRY ENTRY_LIST
.ENTRY_LIST = SYMBOLIC_NAME
            | SYMBOLIC_NAME '(' ')'
            | SYMBOLIC_NAME '(' FORMAL_PARAMETER_LIST ')'
.FORMAL_PARAMETER_LIST = FORMAL_PARAMETER
                       | FORMAL_PARAMETER_LIST ',' FORMAL_PARAMETER
.FORMAL_PARAMETER = SYMBOLIC_NAME
                  | '*'
.FUNCTION_STATEMENT = TYPE_SPECIFICATION FUNCTION ENTRY_LIST
.SUBROUTINE_STATEMENT = SUBROUTINE ENTRY_LIST
.TYPE_SPECIFICATION =
    NON_CHAR_TYPE
  | CHARACTER LEN_OPTION
.NON_CHAR_TYPE =
    INTEGER
  | REAL
  | DOUBLE PRECISION
  | COMPLEX
  | LOGICAL
.LEN_OPTION =
            | '*' LEN_SPECIFICATION
.BLOCK_DATA_STATEMENT = BLOCK DATA
                      | BLOCK DATA SYMBOLIC_NAME
.DIMENSION_STATEMENT = DIMENSION ARRAY_DECLARATOR
                     | DIMENSION_STATEMENT ',' ARRAY_DECLARATOR
.ARRAY_DECLARATOR = SYMBOLIC_NAME '(' BOUND_LIST ')'
.BOUND_LIST = BOUND_
            | BOUND_LIST ',' BOUND_
.BOUND_ = DIM_BOUND_EXPR
        | '*'
        | DIM_BOUND_EXPR ':' DIM_BOUND_EXPR
        | DIM_BOUND_EXPR ':' '*'
.EQUIVALENCE_STATEMENT = EQUIVALENCE EQUIV_LIST
                       | EQUIVALENCE_STATEMENT ',' EQUIV_LIST
.EQUIV_LIST = '(' EQUIV_ENTITIES ')'
.EQUIV_ENTITIES = EQUIV_ENTITY
                | EQUIV_ENTITIES ',' EQUIV_ENTITY
.EQUIV_ENTITY = VARIABLE_NAME
                | ARRAY_ELEMENT_NAME
                | SUBSTRING_NAME
.COMMON_STATEMENT = COMMON COMMON_BLOCK
                  | COMMON COMMON_ELEMENT
                  | COMMON_STATEMENT ',' COMMON_BLOCK
                  | COMMON_STATEMENT     COMMON_BLOCK
                  | COMMON_STATEMENT ',' COMMON_ELEMENT
.COMMON_BLOCK = '/' SYMBOLIC_NAME '/' COMMON_ELEMENT
              | '/'               '/' COMMON_ELEMENT
.COMMON_ELEMENT = VARIABLE_NAME
                | ARRAY_DECLARATOR
.TYPE_STATEMENT = NON_CHAR_TYPE SPECIFICATION_LIST
                | CHARACTER LEN_OPTION CHAR_SPEC_LIST
.SPECIFICATION_LIST = SPECIFICATION
                    | SPECIFICATION_LIST ',' SPECIFICATION
.SPECIFICATION = VARIABLE_NAME
               | ARRAY_DECLARATOR
.CHAR_SPEC_LIST = SPECIFICATION LEN_OPTION
                | CHAR_SPEC_LIST ',' SPECIFICATION LEN_OPTION
.IMPLICIT_STATEMENT = IMPLICIT TYPE_SPECIFICATION IMPLICIT_BLOCK
  | IMPLICIT_STATEMENT ',' IMPLICIT_BLOCK
.IMPLICIT_BLOCK = '(' IMPLICIT_LIST ')'
.IMPLICIT_LIST = IMPLICIT_ELEM
               | IMPLICIT_LIST ',' IMPLICIT_ELEM
.IMPLICIT_ELEM = SYMBOLIC_NAME
               | SYMBOLIC_NAME '-' SYMBOLIC_NAME
.LEN_SPECIFICATION = '(' '*' ')'
                   | NONZERO_UNSIGNED_INT_CONSTANT
                   | '(' INT_CONSTANT_EXPR ')'
.PARAMETER_STATEMENT = PARAMETER_STATEMENT '(' DEFINITION_LIST ')'
.DEFINITION_LIST = DEFINITION
                 | DEFINITION_LIST ',' DEFINITION
.DEFINITION = SYMBOLIC_NAME '=' CONST_EXPR
.EXTERNAL_STATEMENT = EXTERNAL SYMBOLIC_NAME
  | EXTERNAL_STATEMENT ',' SYMBOLIC_NAME
.INTRINSIC_STATEMENT = INTRINSIC SYMBOLIC_NAME
  | INTRINSIC_STATEMENT ',' SYMBOLIC_NAME
.SAVE_STATEMENT = SAVE SAVE_ELEMENT
  | SAVE_STATEMENT ',' SAVE_ELEMENT
.SAVE_ELEMENT = SYMBOLIC_NAME
              | '/' SYMBOLIC_NAME '/'
.DATA_STATEMENT = DATA DATA_BLOCK
                | DATA_STATEMENT ',' DATA_BLOCK
                | DATA_STATEMENT     DATA_BLOCK
.DATA_BLOCK = DATA_LIST '/' DATA_CONSTANT_LIST '/'
.DATA_LIST = DATA_ELEMENT
           | DATA_LIST ',' DATA_ELEMENT
.DATA_ELEMENT = VARIABLE_NAME
              | ARRAY_ELEMENT_NAME
              | SUBSTRING_NAME
              | DATA_IMPLIED_DO_LIST
.DATA_IMPLIED_DO_LIST = IO_IMPLIED_DO_LIST
.DATA_CONSTANT_LIST = DATA_CONSTANT
                    | DATA_CONSTANT_LIST ',' DATA_CONSTANT
.DATA_CONSTANT =                   CONSTANT
               |                   CONSTANT_NAME
               | REPETITION_FACTOR CONSTANT
               | REPETITION_FACTOR CONSTANT_NAME
.REPETITION_FACTOR = NONZERO_UNSIGNED_INT_CONST '*'
                   | CONSTANT_NAME              '*'
.ASSIGNMENT_STATEMENT = ASSIGN LABEL_USAGE TO VARIABLE_NAME
.TARGET_NAME = VARIABLE_NAME
             | ARRAY_ELEMENT_NAME
             | SUBSTRING_NAME
.GOTO_STATEMENT = UNCONDITIONAL_GOTO
                | COMPUTED_GOTO
                | ASSIGNED_GOTO
.UNCONDITIONAL_GOTO = GOTO_SYMBOL LABEL_USAGE
.GOTO_SYMBOL = GO TO | GOTO
.COMPUTED_GOTO = GOTO_SYMBOL '(' LABEL_USAGELIST ')' ',' INTEGER_EXPR
.LABEL_USAGELIST = LABEL_USAGE
            | LABEL_USAGELIST ',' LABEL_USAGE
.ASSIGNED_GOTO = GOTO_SYMBOL VARIABLE_NAME ',' '(' LABEL_USAGELIST ')'
               | GOTO_SYMBOL VARIABLE_NAME     '(' LABEL_USAGELIST ')'
.ARITHMETIC_IF_STATEMENT = IF '(' INT_REAL_DP_EXPR ')' LABEL_USAGE ','
                              LABEL_USAGE ',' LABEL_USAGE
.LOGICAL_IF_STATEMENT = IF '(' LOGICAL_EXPRESSION ')'
                          EXECUTABLE_EXPRESSION
.BLOCK_IF_STATEMENT = IF '(' LOGICAL_EXPRESSION ')' THEN
. ELSE_IF_STATEMENT = ELSE IF '(' LOGICAL_EXPRESSION ')' THEN
.ELSE_STATEMENT = ELSE
.END_IF_STATEMENT = END IF
.DO_STATEMENT = DO LABEL_USAGE COMMA_OPTION VARIABLE_NAME '='
                  INT_REAL_DP_EXPR ',' INT_REAL_DP_EXPR INCREMENT_OPTION
.INCREMENT_OPTION =
                  | ',' INT_REAL_DP_EXPR
.CONTINUE_STATEMENT = CONTINUE
.STOP_STATEMENT = STOP  MESSAGE_OPTION
.PAUSE_STATEMENT = PAUSE MESSAGE_OPTION
.MESSAGE_OPTION =
                | UNSIGNED_INTEGER_CONSTANT
                | CHARACTER_CONSTANT
.WRITE_STATEMENT = WRITE IO_SPECIFICATION
. READ_STATEMENT = READ  IO_SPECIFICATION
.PRINT_STATEMENT = PRINT IO_SPECIFICATION
.IO_SPECIFICATION = '(' CONTROL_INFO_LIST ')' IO_LIST
                  | '(' CONTROL_INFO_LIST ')'
                  | FORMAT_IDENTIFIER ',' IO_LIST
                  | FORMAT_IDENTIFIER
.CONTROL_INFO_LIST = UNIT_IDENTIFIER ',' CONTROL_SPEC_LIST
.CONTROL_INFO_LIST = UNIT_IDENTIFIER
                   | UNIT_IDENTIFIER ',' FORMAT_IDENTIFIER
                   | UNIT_IDENTIFIER ',' FORMAT_IDENTIFIER ','
                       CONTROL_SPEC_LIST
.CONTROL_SPEC_LIST = CONTROL_SPEC
                   | CONTROL_SPEC_LIST ',' CONTROL_SPEC
.CONTROL_SPEC = FMT     '=' FORMAT_IDENTIFIER
              | IO_SPEC
              | REC     '=' INTEGER_EXPR
              | ERR     '=' LABEL_USAGE
.IO_SPEC      = UNIT    '=' UNIT_IDENTIFIER
              | END     '=' LABEL_USAGE
              | IOSTAT  '=' VARIABLE_NAME
              | IOSTAT  '=' ARRAY_ELEMENT_NAME
.IO_LIST = IO_LIST_ELEMENT
         | IO_LIST ',' IO_LIST_ELEMENT
.IO_LIST_ELEMENT = EXPRESSION
                 | IO_IMPLIED_DO_LIST
.IO_IMPLIED_DO_LIST = '(' IO_LIST ',' VARIABLE_NAME '='
      INT_REAL_DP_EXPR ',' INT_REAL_DP_EXPR INCREMENT_OPTION ')'
.OPEN_STATEMENT = OPEN '(' UNIT_IDENTIFIER ',' OPEN_SPEC_LIST ')'
                | OPEN '('                     OPEN_SPEC_LIST ')'
.OPEN_SPEC_LIST = OPEN_SPEC
                | OPEN_SPEC_LIST ',' OPEN_SPEC
.OPEN_SPEC = IO_SPEC
              | FILE    '=' CHARACTER_EXPRESSION
              | STATUS  '=' CHARACTER_EXPRESSION
              | ACCESS  '=' CHARACTER_EXPRESSION
              | FORM    '=' CHARACTER_EXPRESSION
              | RECL    '=' INTEGER_EXPR
              | BLANK   '=' CHARACTER_EXPRESSION
.CLOSE_STATEMENT = CLOSE '(' UNIT_IDENTIFIER ',' CLOSE_SPEC_LIST ')'
                 | CLOSE '('                     CLOSE_SPEC_LIST ')'
.CLOSE_SPEC_LIST = CLOSE_SPEC
                 | CLOSE_SPEC_LIST ',' CLOSE_SPEC
.CLOSE_SPEC = IO_SPEC
              | STATUS  '=' CHARACTER_EXPRESSION
.INQUIRE_STATEMENT = INQUIRE '(' UNIT_IDENTIFIER ',' INQU_SPEC_LIST ')'
                   | INQUIRE '('                     INQU_SPEC_LIST ')'
.INQU_SPEC_LIST = INQU_SPEC
                | INQU_SPEC_LIST ',' INQU_SPEC
.INQU_SPEC = IO_SPEC
           | INQU_KEYWORD '=' VARIABLE_NAME
           | INQU_KEYWORD '=' ARRAY_ELEMENT_NAME
.INQU_KEYWORD = EXIST
  | OPENED
  | NUMBER
  | NAMED
  | NAME
  | ACCESS
  | SEQUENTIAL
  | DIRECT
  | FORM
  | FORMATTED
  | UNFORMATTED
  | RECL
  | NEXTREC
  | BLANK
.BACKSPACE_STATEMENT = BACKSPACE TAPE_SPEC
.ENDFILE_STATEMENT = ENDFILE TAPE_SPEC
.REWIND_STATEMENT = REWIND TAPE_SPEC
.TAPE_SPEC = UNIT_IDENTIFIER
           | '(' UNIT_IDENTIFIER ',' CLOSE_SPEC_LIST ')'
           | '('                     CLOSE_SPEC_LIST ')'
.UNIT_IDENTIFIER = INTEGER_EXP
                 | SUBSTRING_NAME
                 | '*'
.FORMAT_IDENTIFIER = LABEL_USAGE
                   | VARIABLE_NAME
                   | CHARACTER_EXPRESSION
                   | '*'
.FORMAT_STATEMENT = FORMAT '(' FORMAT_SPECIFICATION ')'
                  | FORMAT '('                      ')'
.CALL_STATEMENT = CALL SYMBOLIC_NAME ACTUAL_PARAMETERS_OPTION
.ACTUAL_PARAMETERS_OPTION =
                          | '(' ')'
                          | '(' ACTUAL_PARAMETERS ')'
.ACTUAL_PARAMETERS = ACTUAL_PARAMETER
                   | ACTUAL_PARAMETERS ',' ACTUAL_PARAMETER
.ACTUAL_PARAMETER = EXPRESSION
                  | '*' LABEL_USAGE
.RETURN_STATEMENT = RETURN
                  | RETURN INTEGER_EXPRESSION
.ARRAY_ELEMENT_NAME = SYMBOLIC_NAME '(' SUBSCRIPT_LIST ')'
.SUBSCRIPT_LIST = INTEGER_EXPR
                | SUBSCRIPT_LIST ',' INTEGER_EXPR
.SUBSTRING_NAME = VARIABLE_NAME SUBSTRING_SPEC
                | ARRAY_ELEMENT_NAME SUBSTRING_SPEC
.SUBSTRING_SPEC = '(' INTEGER_EXPR_OPTION ':' INTEGER_EXPR_OPTION ')'
.INTEGER_EXPR_OPTION =
                     | INTEGER_EXPR
.ASSIGNMENT_STATEMENT = INT2_VARIABLE '=' INT2_EXPRESSION
  | INT2_VARIABLE '=' INT4_EXPRESSION
  | INT2_VARIABLE '=' REAL_EXPRESSION
  | INT2_VARIABLE '=' DBLE_EXPRESSION
  | INT4_VARIABLE '=' INT2_EXPRESSION
  | INT4_VARIABLE '=' INT4_EXPRESSION
  | INT4_VARIABLE '=' REAL_EXPRESSION
  | INT4_VARIABLE '=' DBLE_EXPRESSION
  | REAL_VARIABLE '=' INT2_EXPRESSION
  | REAL_VARIABLE '=' INT4_EXPRESSION
  | REAL_VARIABLE '=' REAL_EXPRESSION
  | DBLE_VARIABLE '=' INT2_EXPRESSION
  | DBLE_VARIABLE '=' INT4_EXPRESSION
  | DBLE_VARIABLE '=' REAL_EXPRESSION
  | DBLE_VARIABLE '=' DBLE_EXPRESSION
  | CMPL_VARIABLE '=' INT2_EXPRESSION
  | CMPL_VARIABLE '=' INT4_EXPRESSION
  | CMPL_VARIABLE '=' REAL_EXPRESSION
  | CMPL_VARIABLE '=' DBLE_EXPRESSION
  | CMPL_VARIABLE '=' CMPL_EXPRESSION

.INT2_EXPRESSION =         INT2_TERM
  |                 ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP INT2_TERM
.INT4_EXPRESSION =         INT4_TERM
  |                 ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP INT4_TERM
.REAL_EXPRESSION =         REAL_TERM
  |                 ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP REAL_TERM
.DBLE_EXPRESSION =         DBLE_TERM
  |                 ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP DBLE_TERM
  | DBLE_EXPRESSION ADD_OP DBLE_TERM
.CMPL_EXPRESSION =         CMPL_TERM
  |                 ADD_OP CMPL_TERM
  | CMPL_EXPRESSION ADD_OP INT2_TERM
  | INT2_EXPRESSION ADD_OP CMPL_TERM
  | CMPL_EXPRESSION ADD_OP INT4_TERM
  | INT4_EXPRESSION ADD_OP CMPL_TERM
  | CMPL_EXPRESSION ADD_OP REAL_TERM
  | REAL_EXPRESSION ADD_OP CMPL_TERM
  | CMPL_EXPRESSION ADD_OP CMPL_TERM
  /* OPERATIONS BETWEEN 'DBLE' AND 'CMPL' ARE PROHIBITED */

.INT2_TERM =          INT2_FACTOR
  |           MULT_OP INT2_FACTOR
  | INT2_TERM MULT_OP INT2_FACTOR
.INT4_TERM =          INT4_FACTOR
  |           MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP INT2_FACTOR
  | INT2_TERM MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP INT4_FACTOR
.REAL_TERM =          REAL_FACTOR
  |           MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP INT2_FACTOR
  | INT2_TERM MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP REAL_FACTOR
.DBLE_TERM =          DBLE_FACTOR
  |           MULT_OP DBLE_FACTOR
  | DBLE_TERM MULT_OP INT2_FACTOR
  | INT2_TERM MULT_OP DBLE_FACTOR
  | DBLE_TERM MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP DBLE_FACTOR
  | DBLE_TERM MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP DBLE_FACTOR
  | DBLE_TERM MULT_OP DBLE_FACTOR
.CMPL_TERM =          CMPL_FACTOR
  |           MULT_OP CMPL_FACTOR
  | CMPL_TERM MULT_OP INT2_FACTOR
  | INT2_TERM MULT_OP CMPL_FACTOR
  | CMPL_TERM MULT_OP INT4_FACTOR
  | INT4_TERM MULT_OP CMPL_FACTOR
  | CMPL_TERM MULT_OP REAL_FACTOR
  | REAL_TERM MULT_OP CMPL_FACTOR
  | CMPL_TERM MULT_OP CMPL_FACTOR
  /* OPERATIONS BETWEEN 'DBLE' AND 'CMPL' ARE PROHIBITED */
.
]
