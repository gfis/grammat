/.GEDANKEN LOGON
/.GEDANKEN DO DO.EXTRA,('(PRIMARY)',PARM=SINGLE)
 /*-------------------------------------------------------------------*/
 /* G E D A N K E N   - A SIMPLE TYPELESS LANGUAGE BASED ON THE       */
 /* PRINCIPLE OF COMPLETENESS AND THE REFERENCE CONCEPT.              */
 /* REYNOLDS, J.C., COMM. ACM 13,5 (MAY 1970) 308-319                 */
 /*-------------------------------------------------------------------*/
 EOF IDENTIFIER CONSTANT STRING
[AXIOM = BLOCK
.EXP0 = CONSTANT | IDENTIFIER | '(' BLOCK ')'
.EXP1 = EXP0 | FUNCTION_DESIGNATOR
.FUNCTION_DESIGNATOR = EXP0 EXP1
.EXP2 = EXP1 | EXP1 '=' EXP2
.EXP3 = EXP2 | EXP2 AND EXP3
.EXP4 = EXP3 | EXP3 OR  EXP4
.EXP5 = EXP4 | CONDITIONAL_EXP | LAMBDA_EXP | EXP4 ':=' EXP5
.CONDITIONAL_EXP = IF EXP6 THEN EXP6 ELSE EXP5
.LAMBDA_EXP = LAMBDA PFORM0 EXP5
.EXP6 = EXP5 | SEQUENCE_EXP | CASE_EXP
.SEQUENCE_EXP = | SEVERAL_EXP
.SEVERAL_EXP = EXP5 ',' EXP5 | SEVERAL_EXP ',' EXP5
.CASE_EXP = CASE EXP6 OF EXP5 | CASE_EXP ',' EXP5
.PFORM0 = IDENTIFIER | '(' PFORM1 ')'
.PFORM1 = PFORM0 | SEQUENCE_PFORM
.SEQUENCE_PFORM =  | PFORM0_LIST
.PFORM0_LIST = PFORM0 ',' PFORM0
             | PFORM0_LIST ',' PFORM0
.DECL = PFORM1 IS EXP6
.RECURSIVE_DECL = IDENTIFIER ISR LAMBDA_EXP
.LABEL = IDENTIFIER ':'
.STATEMENT = EXP6 | LABEL STATEMENT
.BLOCK = DECL_LIST RECURSIVE_DECL_LIST STATEMENT_LIST STATEMENT
.DECL_LIST = DECL ';' | DECL_LIST DECL ';'
.RECURSIVE_DECL_LIST = RECURSIVE_DECL ';'
                     | RECURSIVE_DECL_LIST RECURSIVE_DECL ';'
.STATEMENT_LIST = STATEMENT ';' | STATEMENT_LIST STATEMENT ';'
.
]
/LOGOFF
