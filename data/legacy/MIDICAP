/LOGON
/.MIDICAP DO DO.EXTRA,('(PRIMARY)',PARM='ASSERT=200,SINGLE')
 /*-------------------------------------------------------------------*/
 /* M I D I C A P   ZWISCHENVERSION  FEBRUAR 1979 */
 /* AENDERUNGEN 26.6.1979:                                            */
 /* - FUER MAIN-62: IF -> IF_                                         */
 /* - ENTRY AUCH IN DO-GRUPPEN: SIMPLE_ -> BASIC_STATEMENT            */
 /*-------------------------------------------------------------------*/
 EOF IDENTIFIER NUMBER STRING
 /* BITSTRING ';'
 EOF
':='
 ':'
 ','
 ON
 '+'
 '='
 '=>'
 '<-'
 '->'
 '|'
 AT
 FIXED
 FLOAT
 BIT
 CHAR
 FLOAT
 LABEL
 CALL
 BY
 TO
 DELAY
 ELSE
 THEN
 ENTRY
CONCURRENT
 DCL
 FILE
 DEFINED
 INIT
 DOWN
 EXPLICIT
 IMPLICIT
 EXTERNAL
 INTERNAL
 FAN
 MEMORY
 MLIM
 TLIM
'('
')'
 DO
 END
 PROCEDURE
 FUNCTION
 CIRCUIT
 CIRCUITEND
 IF
 */
 [AXIOM = PROGRAM
. PROGRAM = CAP_PROGRAM 
. CAP_PROGRAM = PROCEDURE_DEFINITION
. PROCEDURE_DEFINITION =  PROCEDURE_HEAD STATEMENT_LIST PROCEDURE_ENDING ';'
. PROCEDURE_HEAD =  PROCEDURE_NAME TERMINATOR
       | PROCEDURE_NAME_OPEN VAR_LIST_CLOSE TERMINATOR
. PROCEDURE_NAME_OPEN =  PROCEDURE_NAME '('
. PROCEDURE_NAME =  PROCEDURE_ON_CONDITION PROCEDURE
       |  FUNCTION IDENTIFIER
       |   CIRCUIT IDENTIFIER
. PROCEDURE_ON_CONDITION =  ON_CALL_LABEL_COMMA CLOSE_COLON LABEL_COLON
       |  ON_CALL_LABEL_COMMA CLOSE_COLON
. ON_CALL_LABEL_COMMA =  ON CALL ON_CALL_OPEN LABEL_COMMA
. ON_CALL_OPEN =  '('
. PROCEDURE_ENDING =  ENDING
       |  QUATSCH_GF
. STATEMENT_LIST =  DECLARATION
       | EXECUTABLE_PART
       | DECLARATION      EXECUTABLE_PART
. EXECUTABLE_PART =  STATEMENT
       | EXECUTABLE_PART STATEMENT
. STATEMENT =  BASIC_STATEMENT
       | PROCEDURE_DEFINITION
 
 /* DECLARATION-PART VON  M I D I CAP */
 
. DECLARATION = DECLARATION_PART
. DECLARATION_PART =  DECLARATION_STATEMENT ';'
      | DECLARATION_PART DECLARATION_STATEMENT  ';'
. DECLARATION_STATEMENT =  DECLARE_ DECLARATION_ELEMENT
      | DECLARATION_STATEMENT ',' DECLARATION_ELEMENT
. DECLARE_ =  DECLARE
      | DCL
. DECLARATION_ELEMENT =  FULL_TYPE_DECLARATION
      | FILE_DECLARATION
      | NUM_CONSTANT FULL_TYPE_DECLARATION
      | NUM_CONSTANT IDENTIFIER_SPECIFICATION
      | NUM_CONSTANT IDENTIFIER_SPECIFICATION STORAGE_CLASS
. FILE_DECLARATION =  FILE IDENTIFIER_SPECIFICATION TYPE
. FULL_TYPE_DECLARATION =  TYPE_DECLARATION
      | TYPE_DECLARATION INITIAL_LIST
      | TYPE_DECLARATION DEFINED_LIST
. TYPE_DECLARATION =  IDENTIFIER_SPECIFICATION TYPE
      | IDENTIFIER_SPECIFICATION TYPE STORAGE_CLASS
. IDENTIFIER_SPECIFICATION =  IDENTIFIER
      | BOUND_HEAD BOUND_NUMBER ')'
      | IDENTIFIER_LIST ')'
. IDENTIFIER_LIST =  '(' LABEL_COMMA_DCL_PART
. LABEL_COMMA_DCL_PART = IDENTIFIER
      | LABEL_COMMA_DCL_PART ',' IDENTIFIER
. BOUND_HEAD =  IDENTIFIER '('
      | IDENTIFIER_LIST ')' '('
      | BOUND_HEAD BOUND_NUMBER ','
. BOUND_NUMBER =  NUM_CONSTANT
      | SIGN_CONSTANT_COLON SIGN_CONSTANT
. SIGN_CONSTANT_COLON =  SIGN_CONSTANT ':'
. TYPE =  FIXED
      | FIXED_HEAD FI_REPRESENTATION ')'
      | FLOAT
      | BIT_HEAD SIGN_CONSTANT ')'
      | CHAR_HEAD SIGN_CONSTANT ')'
      | LABEL
      | LABEL_HEAD NUM_CONSTANT ')'
      | LAB_HEAD LAB_SPEC ')'
      | PROCEDURE
      | FUNCTION
. FIXED_HEAD =  FIXED '('
. FI_REPRESENTATION =  NUM_CONSTANT
      | REPRESENTATION_TYPE
      | NUM_CONSTANT COMMA_REPRESENTATION_TYPE
. COMMA_REPRESENTATION_TYPE =  ',' REPRESENTATION_TYPE
. REPRESENTATION_TYPE =  UN
      | UNSIGNED
      | TC
      | TWO_COMPLEMENT
      | OC
      | ONE_COMPLEMENT
. BIT_HEAD =  BIT BIT_OPEN
. CHAR_HEAD =  CHAR BIT_OPEN
      | CHAR BIT_OPEN IDENTIFIER_COMMA_DCL_PART
. BIT_OPEN =  '('
. IDENTIFIER_COMMA_DCL_PART = IDENTIFIER ','
. LABEL_HEAD =  LABEL '('
. LAB_HEAD =  INT_LABEL '('
. LAB_SPEC =  LABLETTER_COMMA NUM_CONSTANT
      | LABLETTER_COMMA NUMBER_COMMA NUM_CONSTANT
. LABLETTER_COMMA =  IDENTIFIER ','
. NUMBER_COMMA =  NUM_CONSTANT ','
. STORAGE_CLASS =  SCOPE
      | DURATION
      | SCOPE DURATION
      | DURATION SCOPE
. SCOPE =  INTERNAL
      | EXTERNAL
. DURATION =  EXPLICIT
      | IMPLICIT
. DEFINED_LIST =  DEFINED_OPEN NUM_CONSTANT ')'
. DEFINED_OPEN =  DEFINED '('
. INITIAL_LIST =  INIT_OPEN INITIAL ')'
. INIT_OPEN =  INIT '('
      | INIT_OPEN INITIAL INIT_COMMA
. INIT_COMMA =  ','
. INITIAL =  INITCONSTANT
      | INITCONSTANT AT NUM_CONSTANT
      | AT NUM_CONSTANT
      | ITERATION_HEAD ')' INITCONSTANT
      | ITERATION_HEAD ')' INITCONSTANT AT NUM_CONSTANT
      | ITERATION_HEAD ')' AT NUM_CONSTANT
. INITCONSTANT =  CONSTANT_DCL_PART
. ITERATION_HEAD =  '(' NUM_CONSTANT
. CONSTANT_DCL_PART = STRING
      | SIGN_CONSTANT
. SIGN_CONSTANT =  '-' NUMBER
      | NUM_CONSTANT
. NUM_CONSTANT =  NUMBER
      | BITSTRING
 
 /* MAIN PART */
 
. BASIC_STATEMENT =  SIMPLE_STATEMENT
       |      ON_CONDITION SIMPLE_STATEMENT
. SIMPLE_STATEMENT =  VERY_BASIC_STATEMENT
       | IF_STATEMENT
       |    LABEL_COLON VERY_BASIC_STATEMENT
       |    LABEL_COLON IF_STATEMENT
. VERY_BASIC_STATEMENT =  ASSIGNMENT TERMINATOR
       | VARIABLE TERMINATOR
       | CALL_ TERMINATOR
       | SEND_ ';'
       | TERMINATOR
       | GROUP ';'
. GROUP =  GROUP_HEAD ENDING
. GROUP_HEAD =  DO_ TERMINATOR
       |      DO_ STEP_DEFINITION TERMINATOR
       | DO_ WHILE_CLAUSE TERMINATOR
       | DO_ CASE_SELECTOR TERMINATOR
       |      GROUP_HEAD   BASIC_STATEMENT       /* 26.6.1979 */
 /*    |      GROUP_HEAD  SIMPLE_STATEMENT    VOR DEM 26.6.1979 */
. DO_ =  DO
       |  DO PARALLEL
       |  DO CONCURRENT
       |       DO SEQUENTIAL
       |DO FIRM
. STEP_DEFINITION =  VARIABLE   REPLACE NUMBER ITERATION_CONTROL
       | VARIABLE   REPLACE NUMBER ITERATION_CONTROL SEQUENTIAL
. ITERATION_CONTROL =   TO SIGNED_NUMBER
       |     TO SIGNED_NUMBER BY SIGNED_NUMBER
. WHILE_CLAUSE =  WHILE EXPRESSION
. CASE_SELECTOR =  CASE EXPRESSION
. ON_CONDITION =   SIMPLE_ON LABEL_COMMA CLOSE_COLON
       |  COMPOUND_ON LABEL_COMMA ')' CLOSE_COLON
. SIMPLE_ON =   ON_OPEN
       |  ON_OPEN RETURNID ','
. RETURNID =  '<-'  IDENTIFIER
. COMPOUND_ON =   ON_OPEN '&' '('
       |  ON_OPEN '|' '('
. ON_OPEN =   ON '('
       |  ENTRY '('
. IF_STATEMENT =  IF_CLAUSE TRUE_PART
. IF_CLAUSE = IF_ EXPRESSION THEN       /* IF -> IF_ 26.6.1979 */
.IF_ = IF    /* VORHER QUATSCH = ... 26.6.1979 */
. TRUE_PART =  SIMPLE_STATEMENT ELSE_ SIMPLE_STATEMENT
. ELSE_ = ELSE
. CALL_ =  CALL_IDENTIFIER
       |  CALL_IDENTIFIER CALL_OPEN EXPRESSION_LIST ')'
. CALL_OPEN =  '('
. CALL_IDENTIFIER =    CALL IDENTIFIER
. VAR_LIST_CLOSE =  VAR_LIST ')'
. ASSIGNMENT =  LEFT_PART REPLACE EXPRESSION
. LEFT_PART =  FREE_VARIABLE
       |  LEFT_PART COMMA_FREE_VARIABLE
       |  LEFT_PART BARS_FREE_VARIABLE
. COMMA_FREE_VARIABLE =    COMMA_1 FREE_VARIABLE
. COMMA_1 =    COMMA_
. BARS_FREE_VARIABLE =   '||' FREE_VARIABLE
. REPLACE =  ':='
. SEND_ =  SENDHEAD ')'
. SENDHEAD =  SEND_OPEN PARMLIST
. SEND_OPEN =  SEND '('
. PARMLIST =  PARMVAL
       |  PARMLIST PARM_COMMA PARMVAL
. PARM_COMMA =  ','
. PARMVAL =  PARMVAR PARMREL PARM
. PARMVAR =  IDENTIFIER
. PARMREL =  '='
. PARM =  IDENTIFIER
       |  NUMBER
. FREE_VARIABLE =  VARIABLE
. EXPRESSION =  LOGICAL_FACTOR
       | EXPRESSION OR_EQUIVALENT LOGICAL_FACTOR
. OR_EQUIVALENT =   '|'
       | ' |'
       | '@'
       | ' @'
. LOGICAL_FACTOR =  LOGICAL_SECONDARY
       | LOGICAL_FACTOR AND_EQUIVALENT LOGICAL_SECONDARY
. AND_EQUIVALENT =  '&'
       | ' &'
. LOGICAL_SECONDARY =  LOGICAL_PRIMARY
       |   LOGICAL_PRIMARY
. LOGICAL_PRIMARY =  STRING_EXPRESSION
       | LOGICAL_PRIMARY RELATION STRING_EXPRESSION
. RELATION =  '='
       | '<'
       | '>'
       | ' ='
       | '<='
       | '>='
. STRING_EXPRESSION =  ARITHMETIC_EXPRESSION
       | STRING_EXPRESSION BARS_ ARITHMETIC_EXPRESSION
. BARS_ =  '||'
. ARITHMETIC_EXPRESSION =  TERM
       | ARITHMETIC_EXPRESSION '+' TERM
       | ARITHMETIC_EXPRESSION MINUS_1 TERM
       | '+' TERM
       | MINUS_2 TERM
. MINUS_1 =  '-'
. MINUS_2 =  '-'
. TERM =  PRIMARY
       | TERM '*' PRIMARY
       | TERM '/' PRIMARY
       | TERM MOD PRIMARY
. PRIMARY =  RED_PRIMARY
       | REDUCTION RED_PRIMARY
. REDUCTION =  REDUCTION_HEAD ')'
. REDUCTION_HEAD =      OPEN LOGIC_OPERATOR
. LOGIC_OPERATOR =  OR_EQUIVALENT
       | AND_EQUIVALENT
. RED_PRIMARY =  CONSTANT
       | FREE_VARIABLE
       | OPEN EXPRESSION ')'
. VARIABLE =  STRICT_VARIABLE
. STRICT_VARIABLE =  IDENTIFIER
       | SUBSCRIPT_HEAD EXPRESSION ')'
. SUBSCRIPT_HEAD =      IDENTIFIER_OPEN
       |  SUBSCRIPT_HEAD EXPRESSION ','
. CONSTANT =  STRING
       | NUMBER
       | BITSTRING
. TERMINATOR =  ';'
       |  TERMINUS ';'
. TERMINUS =   PARAMETER
       |   TERMINUS PARAMETER
. PARAMETER =   REALTIME_PARAMETER  ')'
       |  LASTFACTOR_PARAMETER ')'
       |      MEMORY_PARAMETER
       |  LIMITATION_PARAMETER ')'
. REALTIME_PARAMETER =   DELAY_PARAMETER
       |  INERTIA_PARAMETER
. DELAY_PARAMETER =   DELAY_OPEN DELAY_PART
. DELAY_OPEN =   DELAY '('
. DELAY_PART =   DELAY_ELEMENT
       |  DELAY_PART SLASH DELAY_ELEMENT
. DELAY_ELEMENT =   TIME_OBJECT
       |  '->' TIME_OBJECT
. TIME_OBJECT =   UP TIME TIME_COMMA DOWN TIME
. TIME_COMMA =  ','
. TIME =   NUMBER
       |   NIMBER
. INERTIA_PARAMETER =  INERTIA_OPEN TIME_OBJECT
. INERTIA_OPEN =  INERTIA '('
. LASTFACTOR_PARAMETER =   FAN_OPEN FAN_PART
. FAN_OPEN =   FAN '('
. FAN_PART =   FAN_ELEMENT
       |  FAN_PART  SLASH  FAN_ELEMENT
. SLASH =   '/'
. FAN_ELEMENT =   FAN_OBJECT
       |  '->' FAN_OBJECT
. FAN_OBJECT =  NUMBER
. MEMORY_PARAMETER =   MEMORY
. LIMITATION_PARAMETER =   TLIM_OPEN NUMBER
       |  TLIM_OPEN NIMBER
       |  WCLIM_OPEN NUMBER
       |   MLIM_NUMBER
. MLIM_NUMBER =   MLIM_OPEN NUMBER
       |   MLIM_NUMBER_COMMA NUMBER
. MLIM_NUMBER_COMMA =   MLIM_NUMBER ','
. TLIM_OPEN =   TLIM '('
. WCLIM_OPEN =   WCLIM '('
. MLIM_OPEN =   MLIM '('
. NIMBER =  NUMBER TO NUMBER
. VAR_LIST =  VARIABLE
       |  VAR_LIST COMMA_ VARIABLE
. COMMA_ =   ','
. LABEL_COLON =  IDENTIFIER_COLON
       | LABEL_COLON IDENTIFIER_COLON
. LABEL_COMMA =  IDENTIFIER
       | LABEL_COMMA ','       IDENTIFIER
. IDENTIFIER_COLON =  IDENTIFIER ':'
. ENDING =  END
. IDENTIFIER_OPEN =   IDENTIFIER '('
. CLOSE_COLON =   ')' ':'
. OPEN= '('
. STATEMENT_LIST = DECLARATION ON_CONDITION
                 | EXECUTABLE_PART ON_CONDITION
                 | DECLARATION EXECUTABLE_PART ON_CONDITION
. SIGNED_NUMBER = NUMBER
                | '-' NUMBER
. EXPRESSION_LIST = EXPRESSION
                  | EXPRESSION_LIST ',' EXPRESSION
.
]
/LOGOFF
