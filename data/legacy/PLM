/.PLM LOGON
/.PLM      DO DO.EXTRA,('(PRIMARY)',PARM=SINGLE) 
 /*-------------------------------------------------------------------*/ 
 /*  P L '/' M   FOR INTEL 8080                                         */ 
 /*-------------------------------------------------------------------*/ 
 EOF IDENTIFIER NUMBER STRING 
[AXIOM = PROGRAM 
.PROGRAM = STATEMENT_LIST 
.STATEMENT_LIST = STATEMENT 
                | STATEMENT_LIST STATEMENT 
.STATEMENT = BASIC_STATEMENT 
           | IF_STATEMENT 
.BASIC_STATEMENT = ASSIGNMENT ';' 
                 | GROUP ';' 
                 | PROCEDURE_DEFINITION ';' 
                 | RETURN_STATEMENT ';' 
                 | CALL_STATEMENT ';' 
                 | GOTO_STATEMENT ';' 
                 | DECLARATION_STATEMENT ';' 
                 | HALT ';' 
                 | ENABLE ';' 
                 | DISABLE ';' 
                 | ';' 
                 | LABEL_DEFINITION BASIC_STATEMENT 
.IF_STATEMENT = IF_CLAUSE STATEMENT 
              | IF_CLAUSE TRUE_PART STATEMENT 
              | LABEL_DEFINITION IF_STATEMENT 
.IF_CLAUSE = IF EXPRESSION THEN 
.TRUE_PART = BASIC_STATEMENT ELSE 
.GROUP = GROUP_HEAD ENDING 
.GROUP_HEAD = DO ';' 
            | DO STEP_DEFINITION ';' 
            | DO WHILE_CLAUSE ';' 
            | DO CASE_SELECTOR ';' 
            | GROUP_HEAD STATEMENT 
.STEP_DEFINITION = VARIABLE REPLACE EXPRESSION ITERATION_CONTROL 
.ITERATION_CONTROL = TO_ EXPRESSION 
                   | TO_ EXPRESSION BY_ EXPRESSION 
.WHILE_CLAUSE = WHILE_ EXPRESSION 
.CASE_SELECTOR = CASE EXPRESSION 
.PROCEDURE_DEFINITION = PROCEDURE_HEAD STATEMENT_LIST ENDING 
.PROCEDURE_HEAD = PROCEDURE_NAME ';' 
                | PROCEDURE_NAME TYPE ';' 
                | PROCEDURE_NAME PARAMETER_LIST ';' 
                | PROCEDURE_NAME PARAMETER_LIST TYPE ';' 
                | PROCEDURE_NAME INTERRUPT NUMBER ';' 
.PROCEDURE_NAME = LABEL_DEFINITION PROCEDURE 
.PARAMETER_LIST = PARAMETER_HEAD IDENTIFIER ')' 
.PARAMETER_HEAD =  '('  
                | PARAMETER_HEAD IDENTIFIER ',' 
.ENDING = END 
        | END IDENTIFIER 
        | LABEL_DEFINITION ENDING 
.LABEL_DEFINITION = IDENTIFIER ':' 
                  | NUMBER ':' 
.RETURN_STATEMENT = RETURN 
                  | RETURN EXPRESSION 
.CALL_STATEMENT = CALL VARIABLE 
.GOTO_STATEMENT = GOTO_ IDENTIFIER 
                | GOTO_ NUMBER 
.GOTO_ = GOTO 
       | GO TO 
.DECLARATION_STATEMENT = DECLARE DECLARATION_ELEMENT 
                       | DECLARATION_STATEMENT ',' DECLARATION_ELEMENT 
.DECLARATION_ELEMENT = TYPE_DECLARATION 
                     | IDENTIFIER LITERALLY STRING 
                     | IDENTIFIER DATA_LIST 
.DATA_LIST = DATA_HEAD CONSTANT ')' 
.DATA_HEAD = DATA  '('  
           | DATA_HEAD CONSTANT ',' 
.TYPE_DECLARATION = IDENTIFIER_SPECIFICATION TYPE 
                  | BOUND_HEAD NUMBER ')' TYPE 
                  | TYPE_DECLARATION INITIAL_LIST 
.TYPE = BYTE 
      | ADDRESS 
      | LABEL 
.BOUND_HEAD = IDENTIFIER_SPECIFICATION  '('  
.IDENTIFIER_SPECIFICATION = VARIABLE_NAME 
                          | IDENTIFIER_LIST VARIABLE_NAME ')' 
.IDENTIFIER_LIST =  '('  
                 | IDENTIFIER_LIST VARIABLE_NAME ',' 
.VARIABLE_NAME = IDENTIFIER 
               | BASED_VARIABLE IDENTIFIER 
.BASED_VARIABLE = IDENTIFIER BASED 
.INITIAL_LIST = INITIAL_HEAD CONSTANT ')' 
.INITIAL_HEAD = INITIAL  '('  
              | INITIAL_HEAD CONSTANT ',' 
.ASSIGNMENT = VARIABLE REPLACE EXPRESSION 
            | LEFT_PART ASSIGNMENT 
.REPLACE = '=' 
.LEFT_PART = VARIABLE ',' 
.EXPRESSION = LOGICAL_EXPRESSION 
            | VARIABLE ':=' LOGICAL_EXPRESSION 
.LOGICAL_EXPRESSION = LOGICAL_FACTOR 
                    | LOGICAL_EXPRESSION OR  LOGICAL_FACTOR 
                    | LOGICAL_EXPRESSION XOR LOGICAL_FACTOR 
.LOGICAL_FACTOR = LOGICAL_SECONDARY 
                | LOGICAL_FACTOR AND LOGICAL_SECONDARY 
.LOGICAL_SECONDARY = LOGICAL_PRIMARY 
                   | NOT LOGICAL_PRIMARY 
.LOGICAL_PRIMARY = ARITHMETIC_EXPRESSION 
                 | ARITHMETIC_EXPRESSION RELATION ARITHMETIC_EXPRESSION 
.RELATION = '=' 
          | '<' 
          | '>' 
          | COMP 
.COMP = '<>' 
      | '<=' 
      | '>=' 
.ARITHMETIC_EXPRESSION = TERM 
                       | ARITHMETIC_EXPRESSION '+' TERM 
                       | ARITHMETIC_EXPRESSION '-' TERM 
                       | ARITHMETIC_EXPRESSION PLUS  TERM 
                       | ARITHMETIC_EXPRESSION MINUS TERM 
                       | '-' TERM 
.TERM = PRIMARY 
      | TERM '*' PRIMARY 
      | TERM '/' PRIMARY 
      | TERM MOD PRIMARY 
.PRIMARY = CONSTANT 
         | '.' CONSTANT 
         | CONSTANT_HEAD ',' CONSTANT ')' 
         | VARIABLE 
         | '.' VARIABLE 
         |  '('  EXPRESSION ')' 
.CONSTANT_HEAD = '.'  '('  
               | CONSTANT_HEAD ',' CONSTANT 
.VARIABLE = IDENTIFIER 
          | SUBSCRIPT_HEAD EXPRESSION ')' 
.SUBSCRIPT_HEAD = IDENTIFIER  '('  
                | SUBSCRIPT_HEAD EXPRESSION ',' 
.CONSTANT = STRING 
          | NUMBER 
.TO_ = TO 
.BY_ = BY 
.WHILE_ = WHILE 
. 
] 
/LOGOFF
